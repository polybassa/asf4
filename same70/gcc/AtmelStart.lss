
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000140  20400000  004021c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003b4  20400140  00402308  00020140  2**2
                  ALLOC
  3 .heap         00000204  204004f4  004026bc  00020140  2**0
                  ALLOC
  4 .stack        00000400  204006f8  004028c0  00020140  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
  6 .comment      0000001d  00000000  00000000  0002016e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015319  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003102  00000000  00000000  000354a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000608  00000000  00000000  000385a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000015f8  00000000  00000000  00038bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008ff9  00000000  00000000  0003a1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f820  00000000  00000000  0004319f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013700a  00000000  00000000  000529bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000f2c  00000000  00000000  001899cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008316  00000000  00000000  0018a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 0a 40 20 bd 04 40 00 b9 04 40 00 b9 04 40 00     ..@ ..@...@...@.
  400010:	b9 04 40 00 b9 04 40 00 b9 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 04 40 00 b9 04 40 00 00 00 00 00 b9 04 40 00     ..@...@.......@.
  40003c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40004c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40005c:	b9 04 40 00 b9 04 40 00 00 00 00 00 b9 04 40 00     ..@...@.......@.
  40006c:	b9 04 40 00 00 00 00 00 b9 04 40 00 b9 04 40 00     ..@.......@...@.
  40007c:	b9 04 40 00 b9 04 40 00 00 00 00 00 b9 04 40 00     ..@...@.......@.
  40008c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40009c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000ac:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000bc:	b9 04 40 00 b9 04 40 00 b9 04 40 00 41 07 40 00     ..@...@...@.A.@.
  4000cc:	e9 12 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000dc:	b9 04 40 00 b9 04 40 00 b9 04 40 00 00 00 00 00     ..@...@...@.....
  4000ec:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000fc:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40010c:	b9 04 40 00 b9 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ......@...@...@.
  40012c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 00 00 00 00     ..@...@...@.....
  40013c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40014c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 00 00 00 00     ..@...@...@.....
  40015c:	b9 04 40 00 b9 04 40 00 b9 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7822      	ldrb	r2, [r4, #0]
  40016e:	b932      	cbnz	r2, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400140 	.word	0x20400140
  400184:	00000000 	.word	0x00000000
  400188:	004021c8 	.word	0x004021c8

0040018c <frame_dummy>:
  40018c:	b508      	push	{r3, lr}
  40018e:	4b03      	ldr	r3, [pc, #12]	; (40019c <frame_dummy+0x10>)
  400190:	b11b      	cbz	r3, 40019a <frame_dummy+0xe>
  400192:	4903      	ldr	r1, [pc, #12]	; (4001a0 <frame_dummy+0x14>)
  400194:	4803      	ldr	r0, [pc, #12]	; (4001a4 <frame_dummy+0x18>)
  400196:	f3af 8000 	nop.w
  40019a:	bd08      	pop	{r3, pc}
  40019c:	00000000 	.word	0x00000000
  4001a0:	20400144 	.word	0x20400144
  4001a4:	004021c8 	.word	0x004021c8

004001a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  4001a8:	4b03      	ldr	r3, [pc, #12]	; (4001b8 <atmel_start_init+0x10>)
{
  4001aa:	b510      	push	{r4, lr}
	system_init();
  4001ac:	4798      	blx	r3
	usb_init();
  4001ae:	4b03      	ldr	r3, [pc, #12]	; (4001bc <atmel_start_init+0x14>)
}
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_init();
  4001b4:	4718      	bx	r3
  4001b6:	bf00      	nop
  4001b8:	00402099 	.word	0x00402099
  4001bc:	004012e1 	.word	0x004012e1

004001c0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  4001c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4001c4:	4615      	mov	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
  4001c6:	780a      	ldrb	r2, [r1, #0]
{
  4001c8:	4606      	mov	r6, r0
  4001ca:	460c      	mov	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
  4001cc:	f3c2 1341 	ubfx	r3, r2, #5, #2
  4001d0:	2b01      	cmp	r3, #1
  4001d2:	d155      	bne.n	400280 <cdcdf_acm_req+0xc0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
  4001d4:	4b2d      	ldr	r3, [pc, #180]	; (40028c <cdcdf_acm_req+0xcc>)
  4001d6:	8889      	ldrh	r1, [r1, #4]
  4001d8:	7818      	ldrb	r0, [r3, #0]
  4001da:	4698      	mov	r8, r3
  4001dc:	4288      	cmp	r0, r1
  4001de:	d002      	beq.n	4001e6 <cdcdf_acm_req+0x26>
  4001e0:	785b      	ldrb	r3, [r3, #1]
  4001e2:	428b      	cmp	r3, r1
  4001e4:	d14c      	bne.n	400280 <cdcdf_acm_req+0xc0>
		if (req->bmRequestType & USB_EP_DIR_IN) {
  4001e6:	0613      	lsls	r3, r2, #24
  4001e8:	88e7      	ldrh	r7, [r4, #6]
  4001ea:	d50f      	bpl.n	40020c <cdcdf_acm_req+0x4c>
	if (USB_DATA_STAGE == stage) {
  4001ec:	2d01      	cmp	r5, #1
  4001ee:	d033      	beq.n	400258 <cdcdf_acm_req+0x98>
	switch (req->bRequest) {
  4001f0:	7863      	ldrb	r3, [r4, #1]
  4001f2:	2b21      	cmp	r3, #33	; 0x21
  4001f4:	d112      	bne.n	40021c <cdcdf_acm_req+0x5c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
  4001f6:	2f07      	cmp	r7, #7
  4001f8:	d145      	bne.n	400286 <cdcdf_acm_req+0xc6>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
  4001fa:	2300      	movs	r3, #0
  4001fc:	463a      	mov	r2, r7
  4001fe:	4924      	ldr	r1, [pc, #144]	; (400290 <cdcdf_acm_req+0xd0>)
			return usbdc_xfer(ep, ctrl_buf, len, false);
  400200:	4630      	mov	r0, r6
  400202:	4c24      	ldr	r4, [pc, #144]	; (400294 <cdcdf_acm_req+0xd4>)
  400204:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
  400206:	b002      	add	sp, #8
  400208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
  40020c:	4b22      	ldr	r3, [pc, #136]	; (400298 <cdcdf_acm_req+0xd8>)
  40020e:	4798      	blx	r3
	switch (req->bRequest) {
  400210:	7863      	ldrb	r3, [r4, #1]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
  400212:	4601      	mov	r1, r0
	switch (req->bRequest) {
  400214:	2b20      	cmp	r3, #32
  400216:	d004      	beq.n	400222 <cdcdf_acm_req+0x62>
  400218:	2b22      	cmp	r3, #34	; 0x22
  40021a:	d024      	beq.n	400266 <cdcdf_acm_req+0xa6>
		return ERR_INVALID_ARG;
  40021c:	f06f 000c 	mvn.w	r0, #12
  400220:	e7f1      	b.n	400206 <cdcdf_acm_req+0x46>
		if (sizeof(struct usb_cdc_line_coding) != len) {
  400222:	2f07      	cmp	r7, #7
  400224:	d12f      	bne.n	400286 <cdcdf_acm_req+0xc6>
		if (USB_SETUP_STAGE == stage) {
  400226:	b915      	cbnz	r5, 40022e <cdcdf_acm_req+0x6e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
  400228:	462b      	mov	r3, r5
  40022a:	463a      	mov	r2, r7
  40022c:	e7e8      	b.n	400200 <cdcdf_acm_req+0x40>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
  40022e:	6800      	ldr	r0, [r0, #0]
  400230:	9000      	str	r0, [sp, #0]
  400232:	798b      	ldrb	r3, [r1, #6]
  400234:	888a      	ldrh	r2, [r1, #4]
  400236:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
  40023a:	f8d8 3010 	ldr.w	r3, [r8, #16]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
  40023e:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
  400242:	b95b      	cbnz	r3, 40025c <cdcdf_acm_req+0x9c>
				usbd_cdc_line_coding = line_coding_tmp;
  400244:	4b12      	ldr	r3, [pc, #72]	; (400290 <cdcdf_acm_req+0xd0>)
  400246:	9800      	ldr	r0, [sp, #0]
  400248:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  40024c:	f89d 2006 	ldrb.w	r2, [sp, #6]
  400250:	f8c8 0006 	str.w	r0, [r8, #6]
  400254:	8099      	strh	r1, [r3, #4]
  400256:	719a      	strb	r2, [r3, #6]
		return ERR_NONE;
  400258:	2000      	movs	r0, #0
  40025a:	e7d4      	b.n	400206 <cdcdf_acm_req+0x46>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
  40025c:	4668      	mov	r0, sp
  40025e:	4798      	blx	r3
  400260:	2800      	cmp	r0, #0
  400262:	d1ef      	bne.n	400244 <cdcdf_acm_req+0x84>
  400264:	e7f8      	b.n	400258 <cdcdf_acm_req+0x98>
		usbdc_xfer(0, NULL, 0, 0);
  400266:	2300      	movs	r3, #0
  400268:	4d0a      	ldr	r5, [pc, #40]	; (400294 <cdcdf_acm_req+0xd4>)
  40026a:	461a      	mov	r2, r3
  40026c:	4619      	mov	r1, r3
  40026e:	4618      	mov	r0, r3
  400270:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
  400272:	f8d8 3014 	ldr.w	r3, [r8, #20]
  400276:	2b00      	cmp	r3, #0
  400278:	d0ee      	beq.n	400258 <cdcdf_acm_req+0x98>
			cdcdf_acm_notify_state(req->wValue);
  40027a:	8860      	ldrh	r0, [r4, #2]
  40027c:	4798      	blx	r3
  40027e:	e7eb      	b.n	400258 <cdcdf_acm_req+0x98>
		return ERR_NOT_FOUND;
  400280:	f06f 0009 	mvn.w	r0, #9
  400284:	e7bf      	b.n	400206 <cdcdf_acm_req+0x46>
			return ERR_INVALID_DATA;
  400286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40028a:	e7bc      	b.n	400206 <cdcdf_acm_req+0x46>
  40028c:	2040015c 	.word	0x2040015c
  400290:	20400162 	.word	0x20400162
  400294:	00401b11 	.word	0x00401b11
  400298:	00402049 	.word	0x00402049

0040029c <cdcdf_acm_ctrl>:
	switch (ctrl) {
  40029c:	2901      	cmp	r1, #1
{
  40029e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002a2:	4615      	mov	r5, r2
	switch (ctrl) {
  4002a4:	d04f      	beq.n	400346 <cdcdf_acm_ctrl+0xaa>
  4002a6:	2902      	cmp	r1, #2
  4002a8:	d076      	beq.n	400398 <cdcdf_acm_ctrl+0xfc>
  4002aa:	2900      	cmp	r1, #0
  4002ac:	d177      	bne.n	40039e <cdcdf_acm_ctrl+0x102>
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
  4002ae:	6887      	ldr	r7, [r0, #8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
  4002b0:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4003c8 <cdcdf_acm_ctrl+0x12c>
	ifc = desc->sod;
  4002b4:	6810      	ldr	r0, [r2, #0]
	for (i = 0; i < 2; i++) {
  4002b6:	1e7e      	subs	r6, r7, #1
		if (NULL == ifc) {
  4002b8:	b928      	cbnz	r0, 4002c6 <cdcdf_acm_ctrl+0x2a>
			return ERR_NOT_FOUND;
  4002ba:	f06f 0009 	mvn.w	r0, #9
}
  4002be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002c2:	464e      	mov	r6, r9
  4002c4:	e7f8      	b.n	4002b8 <cdcdf_acm_ctrl+0x1c>
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
  4002c6:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
  4002c8:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
  4002ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4002ce:	2b02      	cmp	r3, #2
  4002d0:	d1f3      	bne.n	4002ba <cdcdf_acm_ctrl+0x1e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
  4002d2:	7873      	ldrb	r3, [r6, #1]
  4002d4:	429a      	cmp	r2, r3
  4002d6:	d065      	beq.n	4003a4 <cdcdf_acm_ctrl+0x108>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
  4002d8:	2bff      	cmp	r3, #255	; 0xff
  4002da:	d166      	bne.n	4003aa <cdcdf_acm_ctrl+0x10e>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
  4002dc:	7072      	strb	r2, [r6, #1]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
  4002de:	2205      	movs	r2, #5
  4002e0:	6869      	ldr	r1, [r5, #4]
  4002e2:	f106 0901 	add.w	r9, r6, #1
  4002e6:	47c0      	blx	r8
  4002e8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 4003cc <cdcdf_acm_ctrl+0x130>
  4002ec:	4604      	mov	r4, r0
		while (NULL != ep) {
  4002ee:	b964      	cbnz	r4, 40030a <cdcdf_acm_ctrl+0x6e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
  4002f0:	682b      	ldr	r3, [r5, #0]
  4002f2:	2204      	movs	r2, #4
  4002f4:	6869      	ldr	r1, [r5, #4]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
  4002f6:	7818      	ldrb	r0, [r3, #0]
  4002f8:	4418      	add	r0, r3
  4002fa:	47c0      	blx	r8
	for (i = 0; i < 2; i++) {
  4002fc:	42be      	cmp	r6, r7
  4002fe:	d1e0      	bne.n	4002c2 <cdcdf_acm_ctrl+0x26>
	_cdcdf_acm_funcd.enabled = true;
  400300:	4b2d      	ldr	r3, [pc, #180]	; (4003b8 <cdcdf_acm_ctrl+0x11c>)
  400302:	2201      	movs	r2, #1
	return ERR_NONE;
  400304:	4620      	mov	r0, r4
	_cdcdf_acm_funcd.enabled = true;
  400306:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
  400308:	e7d9      	b.n	4002be <cdcdf_acm_ctrl+0x22>
	return (ptr[0] + (ptr[1] << 8));
  40030a:	7961      	ldrb	r1, [r4, #5]
  40030c:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
  40030e:	f894 b002 	ldrb.w	fp, [r4, #2]
  400312:	eb02 2201 	add.w	r2, r2, r1, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
  400316:	4b29      	ldr	r3, [pc, #164]	; (4003bc <cdcdf_acm_ctrl+0x120>)
  400318:	78e1      	ldrb	r1, [r4, #3]
  40031a:	4658      	mov	r0, fp
  40031c:	b292      	uxth	r2, r2
  40031e:	4798      	blx	r3
  400320:	2800      	cmp	r0, #0
  400322:	d145      	bne.n	4003b0 <cdcdf_acm_ctrl+0x114>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
  400324:	f01b 0f80 	tst.w	fp, #128	; 0x80
				usb_d_ep_enable(func_data->func_ep_out);
  400328:	4658      	mov	r0, fp
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
  40032a:	bf14      	ite	ne
  40032c:	f889 b002 	strbne.w	fp, [r9, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
  400330:	f887 b004 	strbeq.w	fp, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
  400334:	47d0      	blx	sl
			desc->sod = ep;
  400336:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
  400338:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
  40033a:	6869      	ldr	r1, [r5, #4]
  40033c:	4420      	add	r0, r4
  40033e:	4b20      	ldr	r3, [pc, #128]	; (4003c0 <cdcdf_acm_ctrl+0x124>)
  400340:	4798      	blx	r3
  400342:	4604      	mov	r4, r0
  400344:	e7d3      	b.n	4002ee <cdcdf_acm_ctrl+0x52>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
  400346:	6884      	ldr	r4, [r0, #8]
	if (desc) {
  400348:	b12a      	cbz	r2, 400356 <cdcdf_acm_ctrl+0xba>
		ifc_desc.bInterfaceClass = desc->sod[5];
  40034a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
  40034c:	795b      	ldrb	r3, [r3, #5]
  40034e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  400352:	2b02      	cmp	r3, #2
  400354:	d1b1      	bne.n	4002ba <cdcdf_acm_ctrl+0x1e>
		if (func_data->func_iface[i] == 0xFF) {
  400356:	7823      	ldrb	r3, [r4, #0]
  400358:	2bff      	cmp	r3, #255	; 0xff
  40035a:	d007      	beq.n	40036c <cdcdf_acm_ctrl+0xd0>
			func_data->func_iface[i] = 0xFF;
  40035c:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
  40035e:	78a0      	ldrb	r0, [r4, #2]
  400360:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
  400362:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
  400364:	d002      	beq.n	40036c <cdcdf_acm_ctrl+0xd0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
  400366:	4b17      	ldr	r3, [pc, #92]	; (4003c4 <cdcdf_acm_ctrl+0x128>)
  400368:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
  40036a:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
  40036c:	7863      	ldrb	r3, [r4, #1]
  40036e:	2bff      	cmp	r3, #255	; 0xff
  400370:	d007      	beq.n	400382 <cdcdf_acm_ctrl+0xe6>
			func_data->func_iface[i] = 0xFF;
  400372:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
  400374:	78e0      	ldrb	r0, [r4, #3]
  400376:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
  400378:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
  40037a:	d002      	beq.n	400382 <cdcdf_acm_ctrl+0xe6>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
  40037c:	4b11      	ldr	r3, [pc, #68]	; (4003c4 <cdcdf_acm_ctrl+0x128>)
  40037e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
  400380:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
  400382:	7920      	ldrb	r0, [r4, #4]
  400384:	28ff      	cmp	r0, #255	; 0xff
  400386:	d003      	beq.n	400390 <cdcdf_acm_ctrl+0xf4>
		usb_d_ep_deinit(func_data->func_ep_out);
  400388:	4b0e      	ldr	r3, [pc, #56]	; (4003c4 <cdcdf_acm_ctrl+0x128>)
  40038a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
  40038c:	23ff      	movs	r3, #255	; 0xff
  40038e:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
  400390:	2000      	movs	r0, #0
  400392:	4b09      	ldr	r3, [pc, #36]	; (4003b8 <cdcdf_acm_ctrl+0x11c>)
  400394:	7158      	strb	r0, [r3, #5]
	return ERR_NONE;
  400396:	e792      	b.n	4002be <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
  400398:	f06f 001a 	mvn.w	r0, #26
  40039c:	e78f      	b.n	4002be <cdcdf_acm_ctrl+0x22>
	switch (ctrl) {
  40039e:	f06f 000c 	mvn.w	r0, #12
  4003a2:	e78c      	b.n	4002be <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
  4003a4:	f06f 0011 	mvn.w	r0, #17
  4003a8:	e789      	b.n	4002be <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
  4003aa:	f06f 001b 	mvn.w	r0, #27
  4003ae:	e786      	b.n	4002be <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
  4003b0:	f06f 0013 	mvn.w	r0, #19
  4003b4:	e783      	b.n	4002be <cdcdf_acm_ctrl+0x22>
  4003b6:	bf00      	nop
  4003b8:	2040015c 	.word	0x2040015c
  4003bc:	0040172d 	.word	0x0040172d
  4003c0:	00401403 	.word	0x00401403
  4003c4:	00401791 	.word	0x00401791
  4003c8:	004013e9 	.word	0x004013e9
  4003cc:	004017bd 	.word	0x004017bd

004003d0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
  4003d0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
  4003d2:	4b0a      	ldr	r3, [pc, #40]	; (4003fc <cdcdf_acm_init+0x2c>)
  4003d4:	4798      	blx	r3
  4003d6:	2801      	cmp	r0, #1
  4003d8:	d80c      	bhi.n	4003f4 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
  4003da:	4809      	ldr	r0, [pc, #36]	; (400400 <cdcdf_acm_init+0x30>)
  4003dc:	4b09      	ldr	r3, [pc, #36]	; (400404 <cdcdf_acm_init+0x34>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
  4003de:	e9c0 3007 	strd	r3, r0, [r0, #28]

	usbdc_register_function(&_cdcdf_acm);
  4003e2:	3018      	adds	r0, #24
  4003e4:	4b08      	ldr	r3, [pc, #32]	; (400408 <cdcdf_acm_init+0x38>)
  4003e6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
  4003e8:	2001      	movs	r0, #1
  4003ea:	4908      	ldr	r1, [pc, #32]	; (40040c <cdcdf_acm_init+0x3c>)
  4003ec:	4b08      	ldr	r3, [pc, #32]	; (400410 <cdcdf_acm_init+0x40>)
  4003ee:	4798      	blx	r3
	return ERR_NONE;
  4003f0:	2000      	movs	r0, #0
}
  4003f2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
  4003f4:	f06f 0010 	mvn.w	r0, #16
  4003f8:	e7fb      	b.n	4003f2 <cdcdf_acm_init+0x22>
  4003fa:	bf00      	nop
  4003fc:	00402055 	.word	0x00402055
  400400:	2040015c 	.word	0x2040015c
  400404:	0040029d 	.word	0x0040029d
  400408:	00401ff5 	.word	0x00401ff5
  40040c:	20400000 	.word	0x20400000
  400410:	00401f6d 	.word	0x00401f6d

00400414 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
  400414:	b410      	push	{r4}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
  400416:	4c08      	ldr	r4, [pc, #32]	; (400438 <cdcdf_acm_read+0x24>)
{
  400418:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
  40041a:	7963      	ldrb	r3, [r4, #5]
  40041c:	b13b      	cbz	r3, 40042e <cdcdf_acm_read+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
  40041e:	4601      	mov	r1, r0
  400420:	7920      	ldrb	r0, [r4, #4]
  400422:	4c06      	ldr	r4, [pc, #24]	; (40043c <cdcdf_acm_read+0x28>)
  400424:	2300      	movs	r3, #0
  400426:	46a4      	mov	ip, r4
}
  400428:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
  40042c:	4760      	bx	ip
}
  40042e:	f06f 0010 	mvn.w	r0, #16
  400432:	f85d 4b04 	ldr.w	r4, [sp], #4
  400436:	4770      	bx	lr
  400438:	2040015c 	.word	0x2040015c
  40043c:	00401b11 	.word	0x00401b11

00400440 <cdcdf_acm_write>:
{
  400440:	b410      	push	{r4}
	return _cdcdf_acm_funcd.enabled;
  400442:	4c08      	ldr	r4, [pc, #32]	; (400464 <cdcdf_acm_write+0x24>)
{
  400444:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
  400446:	7963      	ldrb	r3, [r4, #5]
  400448:	b13b      	cbz	r3, 40045a <cdcdf_acm_write+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
  40044a:	4601      	mov	r1, r0
  40044c:	78e0      	ldrb	r0, [r4, #3]
  40044e:	4c06      	ldr	r4, [pc, #24]	; (400468 <cdcdf_acm_write+0x28>)
  400450:	2301      	movs	r3, #1
  400452:	46a4      	mov	ip, r4
}
  400454:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
  400458:	4760      	bx	ip
}
  40045a:	f06f 0010 	mvn.w	r0, #16
  40045e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400462:	4770      	bx	lr
  400464:	2040015c 	.word	0x2040015c
  400468:	00401b11 	.word	0x00401b11

0040046c <cdcdf_acm_register_callback>:
{
  40046c:	460a      	mov	r2, r1
  40046e:	b508      	push	{r3, lr}
  400470:	2803      	cmp	r0, #3
  400472:	d814      	bhi.n	40049e <cdcdf_acm_register_callback+0x32>
  400474:	e8df f000 	tbb	[pc, r0]
  400478:	100d0902 	.word	0x100d0902
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
  40047c:	4b09      	ldr	r3, [pc, #36]	; (4004a4 <cdcdf_acm_register_callback+0x38>)
  40047e:	2102      	movs	r1, #2
  400480:	7918      	ldrb	r0, [r3, #4]
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
  400482:	4b09      	ldr	r3, [pc, #36]	; (4004a8 <cdcdf_acm_register_callback+0x3c>)
  400484:	4798      	blx	r3
	return ERR_NONE;
  400486:	2000      	movs	r0, #0
}
  400488:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
  40048a:	4b06      	ldr	r3, [pc, #24]	; (4004a4 <cdcdf_acm_register_callback+0x38>)
  40048c:	2102      	movs	r1, #2
  40048e:	78d8      	ldrb	r0, [r3, #3]
  400490:	e7f7      	b.n	400482 <cdcdf_acm_register_callback+0x16>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
  400492:	4b04      	ldr	r3, [pc, #16]	; (4004a4 <cdcdf_acm_register_callback+0x38>)
  400494:	6119      	str	r1, [r3, #16]
		break;
  400496:	e7f6      	b.n	400486 <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
  400498:	4b02      	ldr	r3, [pc, #8]	; (4004a4 <cdcdf_acm_register_callback+0x38>)
  40049a:	6159      	str	r1, [r3, #20]
  40049c:	e7f3      	b.n	400486 <cdcdf_acm_register_callback+0x1a>
	return ERR_NONE;
  40049e:	f06f 000c 	mvn.w	r0, #12
  4004a2:	e7f1      	b.n	400488 <cdcdf_acm_register_callback+0x1c>
  4004a4:	2040015c 	.word	0x2040015c
  4004a8:	00401949 	.word	0x00401949

004004ac <cdcdf_acm_is_enabled>:
}
  4004ac:	4b01      	ldr	r3, [pc, #4]	; (4004b4 <cdcdf_acm_is_enabled+0x8>)
  4004ae:	7958      	ldrb	r0, [r3, #5]
  4004b0:	4770      	bx	lr
  4004b2:	bf00      	nop
  4004b4:	2040015c 	.word	0x2040015c

004004b8 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
  4004b8:	e7fe      	b.n	4004b8 <Dummy_Handler>
	...

004004bc <Reset_Handler>:
	if (pSrc != pDest) {
  4004bc:	4a0f      	ldr	r2, [pc, #60]	; (4004fc <Reset_Handler+0x40>)
{
  4004be:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
  4004c0:	4b0f      	ldr	r3, [pc, #60]	; (400500 <Reset_Handler+0x44>)
  4004c2:	429a      	cmp	r2, r3
  4004c4:	d002      	beq.n	4004cc <Reset_Handler+0x10>
		for (; pDest < &_erelocate;) {
  4004c6:	490f      	ldr	r1, [pc, #60]	; (400504 <Reset_Handler+0x48>)
  4004c8:	428b      	cmp	r3, r1
  4004ca:	d30e      	bcc.n	4004ea <Reset_Handler+0x2e>
	pSrc  = &_etext;
  4004cc:	4b0e      	ldr	r3, [pc, #56]	; (400508 <Reset_Handler+0x4c>)
		*pDest++ = 0;
  4004ce:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
  4004d0:	4a0e      	ldr	r2, [pc, #56]	; (40050c <Reset_Handler+0x50>)
  4004d2:	4293      	cmp	r3, r2
  4004d4:	d30e      	bcc.n	4004f4 <Reset_Handler+0x38>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <Reset_Handler+0x54>)
  4004d8:	4a0e      	ldr	r2, [pc, #56]	; (400514 <Reset_Handler+0x58>)
  4004da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004de:	6093      	str	r3, [r2, #8]
	__libc_init_array();
  4004e0:	4b0d      	ldr	r3, [pc, #52]	; (400518 <Reset_Handler+0x5c>)
  4004e2:	4798      	blx	r3
	main();
  4004e4:	4b0d      	ldr	r3, [pc, #52]	; (40051c <Reset_Handler+0x60>)
  4004e6:	4798      	blx	r3
	while (1)
  4004e8:	e7fe      	b.n	4004e8 <Reset_Handler+0x2c>
			*pDest++ = *pSrc++;
  4004ea:	f852 0b04 	ldr.w	r0, [r2], #4
  4004ee:	f843 0b04 	str.w	r0, [r3], #4
  4004f2:	e7e9      	b.n	4004c8 <Reset_Handler+0xc>
		*pDest++ = 0;
  4004f4:	f843 1b04 	str.w	r1, [r3], #4
  4004f8:	e7eb      	b.n	4004d2 <Reset_Handler+0x16>
  4004fa:	bf00      	nop
  4004fc:	004021c8 	.word	0x004021c8
  400500:	20400000 	.word	0x20400000
  400504:	20400140 	.word	0x20400140
  400508:	20400140 	.word	0x20400140
  40050c:	204004f4 	.word	0x204004f4
  400510:	00400000 	.word	0x00400000
  400514:	e000ed00 	.word	0xe000ed00
  400518:	004020d9 	.word	0x004020d9
  40051c:	00401995 	.word	0x00401995

00400520 <_dummy_func_no_return>:
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
}
  400520:	4770      	bx	lr

00400522 <_dummy_func_return_false>:
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
  400522:	2000      	movs	r0, #0
  400524:	4770      	bx	lr
	...

00400528 <_usb_d_dev_handle_setup>:
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  400528:	7cc2      	ldrb	r2, [r0, #19]
{
  40052a:	b410      	push	{r4}

	if (!is_ctrl) {
  40052c:	f002 0407 	and.w	r4, r2, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  400530:	7c81      	ldrb	r1, [r0, #18]
	if (!is_ctrl) {
  400532:	2c01      	cmp	r4, #1
  400534:	f001 030f 	and.w	r3, r1, #15
  400538:	d00c      	beq.n	400554 <_usb_d_dev_handle_setup+0x2c>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40053a:	009b      	lsls	r3, r3, #2
  40053c:	2204      	movs	r2, #4
	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
  40053e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400542:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  400546:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  40054a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  40054e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  400552:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
  400554:	f012 0f40 	tst.w	r2, #64	; 0x40
  400558:	d00c      	beq.n	400574 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
  40055a:	f36f 1286 	bfc	r2, #6, #1
  40055e:	74c2      	strb	r2, [r0, #19]
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  400560:	009a      	lsls	r2, r3, #2
  400562:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  400566:	f502 3260 	add.w	r2, r2, #229376	; 0x38000
  40056a:	f8c2 4190 	str.w	r4, [r2, #400]	; 0x190
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40056e:	2402      	movs	r4, #2
  400570:	f8c2 4160 	str.w	r4, [r2, #352]	; 0x160
	ept->flags.bits.is_stalled = 0;
  400574:	7cc2      	ldrb	r2, [r0, #19]
  400576:	009b      	lsls	r3, r3, #2
}
  400578:	f85d 4b04 	ldr.w	r4, [sp], #4
	ept->flags.bits.is_stalled = 0;
  40057c:	f36f 02c3 	bfc	r2, #3, #1
  400580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  400584:	74c2      	strb	r2, [r0, #19]
  400586:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  40058a:	2218      	movs	r2, #24
	dev_inst.ep_callbacks.setup(ept->ep);
  40058c:	4608      	mov	r0, r1
  40058e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  400592:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  400596:	4b01      	ldr	r3, [pc, #4]	; (40059c <_usb_d_dev_handle_setup+0x74>)
  400598:	689b      	ldr	r3, [r3, #8]
  40059a:	4718      	bx	r3
  40059c:	20400180 	.word	0x20400180

004005a0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  4005a0:	b410      	push	{r4}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  4005a2:	7c84      	ldrb	r4, [r0, #18]
  4005a4:	2cff      	cmp	r4, #255	; 0xff
  4005a6:	d00c      	beq.n	4005c2 <_usb_d_dev_trans_done+0x22>
  4005a8:	7cc3      	ldrb	r3, [r0, #19]
  4005aa:	065a      	lsls	r2, r3, #25
  4005ac:	d509      	bpl.n	4005c2 <_usb_d_dev_trans_done+0x22>
		return;
	}

	ept->flags.bits.is_busy = 0;
  4005ae:	f36f 1386 	bfc	r3, #6, #1
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  4005b2:	6882      	ldr	r2, [r0, #8]
	ept->flags.bits.is_busy = 0;
  4005b4:	74c3      	strb	r3, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  4005b6:	4620      	mov	r0, r4
  4005b8:	4b03      	ldr	r3, [pc, #12]	; (4005c8 <_usb_d_dev_trans_done+0x28>)
}
  4005ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  4005be:	691b      	ldr	r3, [r3, #16]
  4005c0:	4718      	bx	r3
}
  4005c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005c6:	4770      	bx	lr
  4005c8:	20400180 	.word	0x20400180

004005cc <_usb_d_dev_reset_epts>:
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  4005cc:	4b13      	ldr	r3, [pc, #76]	; (40061c <_usb_d_dev_reset_epts+0x50>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  4005ce:	2103      	movs	r1, #3
  4005d0:	681a      	ldr	r2, [r3, #0]
  4005d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
  4005d6:	b570      	push	{r4, r5, r6, lr}
  4005d8:	601a      	str	r2, [r3, #0]
		dev_inst.ep[i].ep       = 0xFF;
  4005da:	25ff      	movs	r5, #255	; 0xff
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  4005dc:	681a      	ldr	r2, [r3, #0]
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  4005de:	4c10      	ldr	r4, [pc, #64]	; (400620 <_usb_d_dev_reset_epts+0x54>)
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  4005e0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4005e4:	4e0f      	ldr	r6, [pc, #60]	; (400624 <_usb_d_dev_reset_epts+0x58>)
  4005e6:	f104 0014 	add.w	r0, r4, #20
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  4005ea:	601a      	str	r2, [r3, #0]
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  4005ec:	681a      	ldr	r2, [r3, #0]
  4005ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4005f2:	601a      	str	r2, [r3, #0]
  4005f4:	47b0      	blx	r6
  4005f6:	2103      	movs	r1, #3
  4005f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
		dev_inst.ep[i].ep       = 0xFF;
  4005fc:	84e5      	strh	r5, [r4, #38]	; 0x26
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  4005fe:	47b0      	blx	r6
  400600:	2103      	movs	r1, #3
  400602:	f104 003c 	add.w	r0, r4, #60	; 0x3c
		dev_inst.ep[i].ep       = 0xFF;
  400606:	8765      	strh	r5, [r4, #58]	; 0x3a
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  400608:	47b0      	blx	r6
  40060a:	2103      	movs	r1, #3
  40060c:	f104 0050 	add.w	r0, r4, #80	; 0x50
		dev_inst.ep[i].ep       = 0xFF;
  400610:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  400614:	47b0      	blx	r6
		dev_inst.ep[i].ep       = 0xFF;
  400616:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
}
  40061a:	bd70      	pop	{r4, r5, r6, pc}
  40061c:	40038000 	.word	0x40038000
  400620:	20400180 	.word	0x20400180
  400624:	004005a1 	.word	0x004005a1

00400628 <_usb_d_dev_dma_next>:
{
  400628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!ept->flags.bits.is_busy) {
  40062c:	7cc5      	ldrb	r5, [r0, #19]
  40062e:	066b      	lsls	r3, r5, #25
  400630:	d535      	bpl.n	40069e <_usb_d_dev_dma_next+0x76>
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  400632:	7c84      	ldrb	r4, [r0, #18]
  400634:	f025 0c6f 	bic.w	ip, r5, #111	; 0x6f
	if (ept->trans_count != ept->trans_size) {
  400638:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  40063c:	f004 040f 	and.w	r4, r4, #15
	if (ept->trans_count != ept->trans_size) {
  400640:	4299      	cmp	r1, r3
  400642:	d039      	beq.n	4006b8 <_usb_d_dev_dma_next+0x90>
		trans_next = ept->trans_size - ept->trans_count;
  400644:	1a5b      	subs	r3, r3, r1
		if (trans_next > USB_D_DEV_TRANS_MAX) {
  400646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(trans_next);
  40064a:	bf92      	itee	ls
  40064c:	041a      	lslls	r2, r3, #16
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  40064e:	2200      	movhi	r2, #0
			trans_next = USB_D_DEV_TRANS_MAX;
  400650:	f44f 3380 	movhi.w	r3, #65536	; 0x10000
		if ((ept->flags.bits.dir) && (!ept->flags.bits.need_zlp)) {
  400654:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
  400658:	d123      	bne.n	4006a2 <_usb_d_dev_dma_next+0x7a>
			dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  40065a:	f042 0208 	orr.w	r2, r2, #8
		hri_usbhs_write_DEVDMAADDRESS_reg(hw, (epn - 1), (uint32_t)&ept->trans_buf[ept->trans_count]);
  40065e:	6805      	ldr	r5, [r0, #0]
  400660:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff

static inline void hri_usbhs_write_DEVDMAADDRESS_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmaaddress_reg_t data)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMAADDRESS = data;
  400664:	4e24      	ldr	r6, [pc, #144]	; (4006f8 <_usb_d_dev_dma_next+0xd0>)
  400666:	eb05 0801 	add.w	r8, r5, r1
  40066a:	fa5f f58e 	uxtb.w	r5, lr
  40066e:	f105 0731 	add.w	r7, r5, #49	; 0x31
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  400672:	eb06 1505 	add.w	r5, r6, r5, lsl #4
	((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMAADDRESS = data;
  400676:	eb06 1707 	add.w	r7, r6, r7, lsl #4
  40067a:	f8c7 8004 	str.w	r8, [r7, #4]
	return (((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  40067e:	f8d5 731c 	ldr.w	r7, [r5, #796]	; 0x31c
		if (!hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(hw, (epn - 1))) {
  400682:	06ff      	lsls	r7, r7, #27
  400684:	d417      	bmi.n	4006b6 <_usb_d_dev_dma_next+0x8e>
			ept->trans_count += trans_next;
  400686:	4419      	add	r1, r3
		dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT | USBHS_DEVDMACONTROL_CHANN_ENB;
  400688:	f042 0221 	orr.w	r2, r2, #33	; 0x21
	((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMACONTROL = data;
  40068c:	f8c5 2318 	str.w	r2, [r5, #792]	; 0x318
			ept->trans_load = trans_next;
  400690:	e9c0 1302 	strd	r1, r3, [r0, #8]
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  400694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  400698:	fa03 f30e 	lsl.w	r3, r3, lr
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  40069c:	61b3      	str	r3, [r6, #24]
}
  40069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  4006a2:	f005 0507 	and.w	r5, r5, #7
  4006a6:	2d02      	cmp	r5, #2
  4006a8:	d102      	bne.n	4006b0 <_usb_d_dev_dma_next+0x88>
  4006aa:	8a05      	ldrh	r5, [r0, #16]
  4006ac:	429d      	cmp	r5, r3
  4006ae:	d3d6      	bcc.n	40065e <_usb_d_dev_dma_next+0x36>
				dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT | USBHS_DEVDMACONTROL_END_TR_EN;
  4006b0:	f042 0214 	orr.w	r2, r2, #20
  4006b4:	e7d3      	b.n	40065e <_usb_d_dev_dma_next+0x36>
		ept->trans_size = ept->trans_count;
  4006b6:	6041      	str	r1, [r0, #4]
	if ((ept->flags.bits.dir) && (ept->flags.bits.need_zlp)) {
  4006b8:	f1bc 0f90 	cmp.w	ip, #144	; 0x90
  4006bc:	d116      	bne.n	4006ec <_usb_d_dev_dma_next+0xc4>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4006be:	00a3      	lsls	r3, r4, #2
  4006c0:	2201      	movs	r2, #1
  4006c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  4006c6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  4006ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RWALL) >> USBHS_DEVEPTISR_RWALL_Pos;
  4006ce:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
		if (hri_usbhs_get_DEVEPTISR_RWALL_bit(hw, epn)) {
  4006d2:	03c9      	lsls	r1, r1, #15
  4006d4:	d501      	bpl.n	4006da <_usb_d_dev_dma_next+0xb2>
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  4006d6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  4006da:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006e2:	fa03 f404 	lsl.w	r4, r3, r4
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4006e6:	4b04      	ldr	r3, [pc, #16]	; (4006f8 <_usb_d_dev_dma_next+0xd0>)
  4006e8:	619c      	str	r4, [r3, #24]
		return;
  4006ea:	e7d8      	b.n	40069e <_usb_d_dev_dma_next+0x76>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4006ec:	2100      	movs	r1, #0
  4006ee:	4b03      	ldr	r3, [pc, #12]	; (4006fc <_usb_d_dev_dma_next+0xd4>)
}
  4006f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4006f4:	4718      	bx	r3
  4006f6:	bf00      	nop
  4006f8:	40038000 	.word	0x40038000
  4006fc:	004005a1 	.word	0x004005a1

00400700 <_usb_d_dev_trans_stop>:
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400700:	7c83      	ldrb	r3, [r0, #18]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  400702:	2bff      	cmp	r3, #255	; 0xff
{
  400704:	b410      	push	{r4}
  400706:	460c      	mov	r4, r1
  400708:	4611      	mov	r1, r2
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  40070a:	d011      	beq.n	400730 <_usb_d_dev_trans_stop+0x30>
  40070c:	7cc2      	ldrb	r2, [r0, #19]
  40070e:	0652      	lsls	r2, r2, #25
  400710:	d50e      	bpl.n	400730 <_usb_d_dev_trans_stop+0x30>
		return;
	}

	/* Stop transfer */
	if (dir) {
  400712:	f003 030f 	and.w	r3, r3, #15
  400716:	4a08      	ldr	r2, [pc, #32]	; (400738 <_usb_d_dev_trans_stop+0x38>)
  400718:	b13c      	cbz	r4, 40072a <_usb_d_dev_trans_stop+0x2a>
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  40071a:	3364      	adds	r3, #100	; 0x64
  40071c:	2401      	movs	r4, #1
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40071e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
	}

	_usb_d_dev_trans_done(ept, code);
  400722:	4b06      	ldr	r3, [pc, #24]	; (40073c <_usb_d_dev_trans_stop+0x3c>)
}
  400724:	f85d 4b04 	ldr.w	r4, [sp], #4
	_usb_d_dev_trans_done(ept, code);
  400728:	4718      	bx	r3
  40072a:	3358      	adds	r3, #88	; 0x58
  40072c:	2402      	movs	r4, #2
  40072e:	e7f6      	b.n	40071e <_usb_d_dev_trans_stop+0x1e>
}
  400730:	f85d 4b04 	ldr.w	r4, [sp], #4
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	40038000 	.word	0x40038000
  40073c:	004005a1 	.word	0x004005a1

00400740 <USBHS_Handler>:
	return ((Usbhs *)hw)->USBHS_DEVISR;
  400740:	4bb7      	ldr	r3, [pc, #732]	; (400a20 <USBHS_Handler+0x2e0>)
  400742:	6859      	ldr	r1, [r3, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  400744:	691a      	ldr	r2, [r3, #16]
	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  400746:	400a      	ands	r2, r1
{
  400748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  40074c:	f3c2 3109 	ubfx	r1, r2, #12, #10
{
  400750:	b085      	sub	sp, #20
	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  400752:	9101      	str	r1, [sp, #4]
	dma_int = (flags & USBHS_DEVISR_DMA__Msk) >> USBHS_DEVISR_DMA__Pos;
  400754:	0e51      	lsrs	r1, r2, #25
  400756:	9102      	str	r1, [sp, #8]
	if ((ep_int == 0) && (dma_int == 0)) {
  400758:	9901      	ldr	r1, [sp, #4]
  40075a:	ea51 6252 	orrs.w	r2, r1, r2, lsr #25
  40075e:	d13c      	bne.n	4007da <USBHS_Handler+0x9a>
	return ((Usbhs *)hw)->USBHS_DEVISR;
  400760:	685a      	ldr	r2, [r3, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  400762:	6919      	ldr	r1, [r3, #16]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  400764:	b292      	uxth	r2, r2
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  400766:	400a      	ands	r2, r1
	if (flags & USBHS_DEVISR_SOF) {
  400768:	0754      	lsls	r4, r2, #29
  40076a:	d507      	bpl.n	40077c <USBHS_Handler+0x3c>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  40076c:	2204      	movs	r2, #4
  40076e:	609a      	str	r2, [r3, #8]
	dev_inst.callbacks.sof();
  400770:	4bac      	ldr	r3, [pc, #688]	; (400a24 <USBHS_Handler+0x2e4>)
  400772:	681b      	ldr	r3, [r3, #0]
}
  400774:	b005      	add	sp, #20
  400776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.sof();
  40077a:	4718      	bx	r3
	} else if (flags & USBHS_DEVISR_MSOF) {
  40077c:	f012 0102 	ands.w	r1, r2, #2
  400780:	d001      	beq.n	400786 <USBHS_Handler+0x46>
  400782:	2202      	movs	r2, #2
  400784:	e7f3      	b.n	40076e <USBHS_Handler+0x2e>
	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  400786:	f012 0570 	ands.w	r5, r2, #112	; 0x70
  40078a:	d00b      	beq.n	4007a4 <USBHS_Handler+0x64>
  40078c:	2270      	movs	r2, #112	; 0x70
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  40078e:	2002      	movs	r0, #2
  400790:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  400792:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  400794:	2201      	movs	r2, #1
  400796:	619a      	str	r2, [r3, #24]
  400798:	4ba2      	ldr	r3, [pc, #648]	; (400a24 <USBHS_Handler+0x2e4>)
  40079a:	685b      	ldr	r3, [r3, #4]
}
  40079c:	b005      	add	sp, #20
  40079e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  4007a2:	4718      	bx	r3
	} else if (flags & USBHS_DEVISR_EORST) {
  4007a4:	f012 0108 	ands.w	r1, r2, #8
  4007a8:	d00c      	beq.n	4007c4 <USBHS_Handler+0x84>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  4007aa:	2208      	movs	r2, #8
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4007ac:	2401      	movs	r4, #1
	((Usbhs *)hw)->USBHS_DEVICR = data;
  4007ae:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  4007b0:	2270      	movs	r2, #112	; 0x70
  4007b2:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4007b4:	619c      	str	r4, [r3, #24]
	_usb_d_dev_reset_epts();
  4007b6:	4b9c      	ldr	r3, [pc, #624]	; (400a28 <USBHS_Handler+0x2e8>)
  4007b8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  4007ba:	4b9a      	ldr	r3, [pc, #616]	; (400a24 <USBHS_Handler+0x2e4>)
  4007bc:	4629      	mov	r1, r5
  4007be:	4620      	mov	r0, r4
  4007c0:	685b      	ldr	r3, [r3, #4]
  4007c2:	e7eb      	b.n	40079c <USBHS_Handler+0x5c>
	} else if (flags & USBHS_DEVISR_SUSP) {
  4007c4:	07d0      	lsls	r0, r2, #31
  4007c6:	d508      	bpl.n	4007da <USBHS_Handler+0x9a>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  4007c8:	2201      	movs	r2, #1
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  4007ca:	2004      	movs	r0, #4
  4007cc:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  4007ce:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4007d0:	2270      	movs	r2, #112	; 0x70
  4007d2:	619a      	str	r2, [r3, #24]
  4007d4:	4b93      	ldr	r3, [pc, #588]	; (400a24 <USBHS_Handler+0x2e4>)
  4007d6:	685b      	ldr	r3, [r3, #4]
  4007d8:	e7e0      	b.n	40079c <USBHS_Handler+0x5c>
  4007da:	4c94      	ldr	r4, [pc, #592]	; (400a2c <USBHS_Handler+0x2ec>)
{
  4007dc:	2700      	movs	r7, #0
	return (((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  4007de:	f8df 9240 	ldr.w	r9, [pc, #576]	; 400a20 <USBHS_Handler+0x2e0>
			_usb_d_dev_handle_setup(ept);
  4007e2:	f8df a258 	ldr.w	sl, [pc, #600]	; 400a3c <USBHS_Handler+0x2fc>
		if (ept->ep == 0xFF) {
  4007e6:	7ca0      	ldrb	r0, [r4, #18]
  4007e8:	28ff      	cmp	r0, #255	; 0xff
  4007ea:	d05f      	beq.n	4008ac <USBHS_Handler+0x16c>
		if (ep_int) {
  4007ec:	9b01      	ldr	r3, [sp, #4]
  4007ee:	2b00      	cmp	r3, #0
  4007f0:	f000 8126 	beq.w	400a40 <USBHS_Handler+0x300>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4007f4:	f000 060f 	and.w	r6, r0, #15
	if (!(epint & (1u << epn))) {
  4007f8:	2101      	movs	r1, #1
  4007fa:	9a01      	ldr	r2, [sp, #4]
  4007fc:	fa01 f306 	lsl.w	r3, r1, r6
  400800:	4213      	tst	r3, r2
  400802:	d053      	beq.n	4008ac <USBHS_Handler+0x16c>
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  400804:	00b5      	lsls	r5, r6, #2
  400806:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  40080a:	f505 3560 	add.w	r5, r5, #229376	; 0x38000
  40080e:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  400812:	f8d5 21c0 	ldr.w	r2, [r5, #448]	; 0x1c0
	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  400816:	b2db      	uxtb	r3, r3
	if (flags) {
  400818:	4013      	ands	r3, r2
  40081a:	d047      	beq.n	4008ac <USBHS_Handler+0x16c>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  40081c:	065a      	lsls	r2, r3, #25
  40081e:	d506      	bpl.n	40082e <USBHS_Handler+0xee>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  400820:	2340      	movs	r3, #64	; 0x40
  400822:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  400826:	4620      	mov	r0, r4
  400828:	4b81      	ldr	r3, [pc, #516]	; (400a30 <USBHS_Handler+0x2f0>)
  40082a:	4798      	blx	r3
  40082c:	e03e      	b.n	4008ac <USBHS_Handler+0x16c>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  40082e:	f894 8013 	ldrb.w	r8, [r4, #19]
  400832:	f018 0f40 	tst.w	r8, #64	; 0x40
  400836:	d104      	bne.n	400842 <USBHS_Handler+0x102>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  400838:	0759      	lsls	r1, r3, #29
  40083a:	d537      	bpl.n	4008ac <USBHS_Handler+0x16c>
			_usb_d_dev_handle_setup(ept);
  40083c:	4620      	mov	r0, r4
  40083e:	47d0      	blx	sl
  400840:	e034      	b.n	4008ac <USBHS_Handler+0x16c>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  400842:	f018 0f80 	tst.w	r8, #128	; 0x80
  400846:	d07e      	beq.n	400946 <USBHS_Handler+0x206>
	if (flags & USBHS_DEVEPTISR_TXINI) {
  400848:	07d9      	lsls	r1, r3, #31
  40084a:	f008 0b07 	and.w	fp, r8, #7
  40084e:	d576      	bpl.n	40093e <USBHS_Handler+0x1fe>
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  400850:	f240 33ff 	movw	r3, #1023	; 0x3ff
  400854:	f8b4 c010 	ldrh.w	ip, [r4, #16]
  400858:	459c      	cmp	ip, r3
	if (ept->trans_count >= ept->trans_size) {
  40085a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  40085e:	bf16      	itet	ne
  400860:	f10c 33ff 	addne.w	r3, ip, #4294967295	; 0xffffffff
  400864:	4663      	moveq	r3, ip
  400866:	b21b      	sxthne	r3, r3
	if (ept->trans_count >= ept->trans_size) {
  400868:	4291      	cmp	r1, r2
  40086a:	d34d      	bcc.n	400908 <USBHS_Handler+0x1c8>
		if (ept->flags.bits.need_zlp) {
  40086c:	f018 0f10 	tst.w	r8, #16
  400870:	d023      	beq.n	4008ba <USBHS_Handler+0x17a>
			ept->flags.bits.need_zlp = 0;
  400872:	4a6c      	ldr	r2, [pc, #432]	; (400a24 <USBHS_Handler+0x2e4>)
  400874:	2314      	movs	r3, #20
			ept->trans_load          = 0;
  400876:	2100      	movs	r1, #0
			if (!is_ctrl) {
  400878:	f1bb 0f01 	cmp.w	fp, #1
			ept->flags.bits.need_zlp = 0;
  40087c:	fb03 2307 	mla	r3, r3, r7, r2
			ept->trans_load          = 0;
  400880:	60e1      	str	r1, [r4, #12]
			ept->flags.bits.need_zlp = 0;
  400882:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  400886:	f361 1204 	bfi	r2, r1, #4, #1
  40088a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40088e:	f04f 0301 	mov.w	r3, #1
  400892:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
  400896:	f04f 0308 	mov.w	r3, #8
  40089a:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  40089e:	f8c5 31f0 	str.w	r3, [r5, #496]	; 0x1f0
		if (!is_ctrl) {
  4008a2:	d003      	beq.n	4008ac <USBHS_Handler+0x16c>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  4008a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4008a8:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
	for (i = 0; i < USB_D_N_EP; i++) {
  4008ac:	3701      	adds	r7, #1
  4008ae:	3414      	adds	r4, #20
  4008b0:	2f04      	cmp	r7, #4
  4008b2:	d198      	bne.n	4007e6 <USBHS_Handler+0xa6>
}
  4008b4:	b005      	add	sp, #20
  4008b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4008ba:	f04f 0e01 	mov.w	lr, #1
	uint16_t trans_count = ept->trans_load;
  4008be:	68e2      	ldr	r2, [r4, #12]
		if (!is_ctrl) {
  4008c0:	45f3      	cmp	fp, lr
  4008c2:	f8c5 e220 	str.w	lr, [r5, #544]	; 0x220
  4008c6:	d005      	beq.n	4008d4 <USBHS_Handler+0x194>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4008c8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  4008cc:	fa05 f606 	lsl.w	r6, r5, r6
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  4008d0:	f8c9 6014 	str.w	r6, [r9, #20]
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  4008d4:	4013      	ands	r3, r2
		ept->trans_size = ept->trans_count;
  4008d6:	6061      	str	r1, [r4, #4]
		if (last_pkt == ept->size) {
  4008d8:	b29b      	uxth	r3, r3
  4008da:	459c      	cmp	ip, r3
  4008dc:	d112      	bne.n	400904 <USBHS_Handler+0x1c4>
			ept->flags.bits.is_busy = 0;
  4008de:	4a51      	ldr	r2, [pc, #324]	; (400a24 <USBHS_Handler+0x2e4>)
  4008e0:	2314      	movs	r3, #20
  4008e2:	fb03 2307 	mla	r3, r3, r7, r2
  4008e6:	f103 0520 	add.w	r5, r3, #32
  4008ea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
  4008ee:	f36f 1386 	bfc	r3, #6, #1
  4008f2:	71eb      	strb	r3, [r5, #7]
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  4008f4:	68d3      	ldr	r3, [r2, #12]
  4008f6:	4798      	blx	r3
  4008f8:	2800      	cmp	r0, #0
  4008fa:	d1d7      	bne.n	4008ac <USBHS_Handler+0x16c>
			ept->flags.bits.is_busy = 1;
  4008fc:	79eb      	ldrb	r3, [r5, #7]
  4008fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400902:	71eb      	strb	r3, [r5, #7]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  400904:	2100      	movs	r1, #0
  400906:	e78e      	b.n	400826 <USBHS_Handler+0xe6>
		trans_next = ept->trans_size - ept->trans_count;
  400908:	eba2 0801 	sub.w	r8, r2, r1
	uint8_t *ptr_dest = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  40090c:	03f0      	lsls	r0, r6, #15
		ptr_src = &ept->trans_buf[ept->trans_count];
  40090e:	6823      	ldr	r3, [r4, #0]
		trans_next = ept->trans_size - ept->trans_count;
  400910:	fa1f f888 	uxth.w	r8, r8
		memcpy(ptr_dest, ptr_src, trans_next);
  400914:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  400918:	4419      	add	r1, r3
  40091a:	4b46      	ldr	r3, [pc, #280]	; (400a34 <USBHS_Handler+0x2f4>)
  40091c:	45e0      	cmp	r8, ip
  40091e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
  400922:	bf28      	it	cs
  400924:	46e0      	movcs	r8, ip
  400926:	4642      	mov	r2, r8
  400928:	4798      	blx	r3
		ept->trans_count += trans_next;
  40092a:	68a2      	ldr	r2, [r4, #8]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40092c:	2301      	movs	r3, #1
		ept->trans_load = trans_next;
  40092e:	f8c4 800c 	str.w	r8, [r4, #12]
		ept->trans_count += trans_next;
  400932:	4442      	add	r2, r8
		if (!is_ctrl) {
  400934:	459b      	cmp	fp, r3
		ept->trans_count += trans_next;
  400936:	60a2      	str	r2, [r4, #8]
  400938:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
		if (!is_ctrl) {
  40093c:	e7b1      	b.n	4008a2 <USBHS_Handler+0x162>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  40093e:	f1bb 0f01 	cmp.w	fp, #1
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  400942:	d1b3      	bne.n	4008ac <USBHS_Handler+0x16c>
  400944:	e778      	b.n	400838 <USBHS_Handler+0xf8>
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  400946:	069a      	lsls	r2, r3, #26
  400948:	d50e      	bpl.n	400968 <USBHS_Handler+0x228>
  40094a:	2320      	movs	r3, #32
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  40094c:	4a35      	ldr	r2, [pc, #212]	; (400a24 <USBHS_Handler+0x2e4>)
  40094e:	4620      	mov	r0, r4
  400950:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
  400954:	2314      	movs	r3, #20
  400956:	fb03 2307 	mla	r3, r3, r7, r2
  40095a:	2204      	movs	r2, #4
  40095c:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
  400960:	4b35      	ldr	r3, [pc, #212]	; (400a38 <USBHS_Handler+0x2f8>)
  400962:	09c9      	lsrs	r1, r1, #7
  400964:	4798      	blx	r3
}
  400966:	e7a1      	b.n	4008ac <USBHS_Handler+0x16c>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  400968:	0798      	lsls	r0, r3, #30
  40096a:	f008 0807 	and.w	r8, r8, #7
  40096e:	d553      	bpl.n	400a18 <USBHS_Handler+0x2d8>
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  400970:	f8d5 1130 	ldr.w	r1, [r5, #304]	; 0x130
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400974:	2202      	movs	r2, #2
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  400976:	f3c1 510a 	ubfx	r1, r1, #20, #11
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  40097a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  40097e:	f8c5 2160 	str.w	r2, [r5, #352]	; 0x160
	if (last_trans > 0) {
  400982:	2900      	cmp	r1, #0
  400984:	d03b      	beq.n	4009fe <USBHS_Handler+0x2be>
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  400986:	1a1b      	subs	r3, r3, r0
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  400988:	b28a      	uxth	r2, r1
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  40098a:	b29b      	uxth	r3, r3
		if (last_trans > last_remain) {
  40098c:	4299      	cmp	r1, r3
	uint8_t *ptr         = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  40098e:	ea4f 31c6 	mov.w	r1, r6, lsl #15
		if (last_trans > last_remain) {
  400992:	bf88      	it	hi
  400994:	461a      	movhi	r2, r3
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  400996:	f101 4120 	add.w	r1, r1, #2684354560	; 0xa0000000
  40099a:	6823      	ldr	r3, [r4, #0]
		if (last_trans > last_remain) {
  40099c:	bf98      	it	ls
  40099e:	f04f 0b00 	movls.w	fp, #0
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  4009a2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
  4009a6:	9203      	str	r2, [sp, #12]
  4009a8:	4418      	add	r0, r3
  4009aa:	4b22      	ldr	r3, [pc, #136]	; (400a34 <USBHS_Handler+0x2f4>)
		if (last_trans > last_remain) {
  4009ac:	bf88      	it	hi
  4009ae:	f04f 0b01 	movhi.w	fp, #1
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  4009b2:	4798      	blx	r3
		ept->trans_count += last_trans;
  4009b4:	68a3      	ldr	r3, [r4, #8]
  4009b6:	9a03      	ldr	r2, [sp, #12]
  4009b8:	4413      	add	r3, r2
		ept->trans_load = last_trans;
  4009ba:	e9c4 3202 	strd	r3, r2, [r4, #8]
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  4009be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4009c2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
	if (last_trans < ept->size) {
  4009c6:	8a23      	ldrh	r3, [r4, #16]
  4009c8:	4293      	cmp	r3, r2
  4009ca:	d91c      	bls.n	400a06 <USBHS_Handler+0x2c6>
		ept->flags.bits.need_zlp = 0;
  4009cc:	4a15      	ldr	r2, [pc, #84]	; (400a24 <USBHS_Handler+0x2e4>)
  4009ce:	2314      	movs	r3, #20
  4009d0:	fb03 2307 	mla	r3, r3, r7, r2
  4009d4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  4009d8:	f36f 1204 	bfc	r2, #4, #1
  4009dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  4009e0:	2302      	movs	r3, #2
		if (!is_ctrl) {
  4009e2:	f1b8 0f01 	cmp.w	r8, #1
  4009e6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  4009ea:	d005      	beq.n	4009f8 <USBHS_Handler+0x2b8>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4009ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4009f0:	fa00 f606 	lsl.w	r6, r0, r6
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  4009f4:	f8c9 6014 	str.w	r6, [r9, #20]
		ept->trans_size = ept->trans_count;
  4009f8:	68a3      	ldr	r3, [r4, #8]
  4009fa:	6063      	str	r3, [r4, #4]
  4009fc:	e782      	b.n	400904 <USBHS_Handler+0x1c4>
	bool     is_full = false, is_short = false;
  4009fe:	f04f 0b00 	mov.w	fp, #0
  400a02:	465a      	mov	r2, fp
  400a04:	e7df      	b.n	4009c6 <USBHS_Handler+0x286>
	} else if (ept->trans_count >= ept->trans_size) {
  400a06:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  400a0a:	429a      	cmp	r2, r3
  400a0c:	d2e8      	bcs.n	4009e0 <USBHS_Handler+0x2a0>
	if (is_full || is_short) {
  400a0e:	f1bb 0f00 	cmp.w	fp, #0
  400a12:	f43f af4b 	beq.w	4008ac <USBHS_Handler+0x16c>
  400a16:	e7e3      	b.n	4009e0 <USBHS_Handler+0x2a0>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  400a18:	f1b8 0f01 	cmp.w	r8, #1
  400a1c:	e791      	b.n	400942 <USBHS_Handler+0x202>
  400a1e:	bf00      	nop
  400a20:	40038000 	.word	0x40038000
  400a24:	20400180 	.word	0x20400180
  400a28:	004005cd 	.word	0x004005cd
  400a2c:	20400194 	.word	0x20400194
  400a30:	004005a1 	.word	0x004005a1
  400a34:	00402121 	.word	0x00402121
  400a38:	00400701 	.word	0x00400701
  400a3c:	00400529 	.word	0x00400529
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
  400a40:	9b02      	ldr	r3, [sp, #8]
  400a42:	2b00      	cmp	r3, #0
  400a44:	f43f af32 	beq.w	4008ac <USBHS_Handler+0x16c>
  400a48:	1e7b      	subs	r3, r7, #1
  400a4a:	b2db      	uxtb	r3, r3
  400a4c:	2b05      	cmp	r3, #5
  400a4e:	f63f af2d 	bhi.w	4008ac <USBHS_Handler+0x16c>
	if (!(epint & (1u << (epn - 1)))) {
  400a52:	f000 000f 	and.w	r0, r0, #15
  400a56:	2301      	movs	r3, #1
  400a58:	9a02      	ldr	r2, [sp, #8]
  400a5a:	3801      	subs	r0, #1
  400a5c:	4083      	lsls	r3, r0
  400a5e:	4213      	tst	r3, r2
  400a60:	f43f af24 	beq.w	4008ac <USBHS_Handler+0x16c>
	return (((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  400a64:	b2c3      	uxtb	r3, r0
  400a66:	eb09 1303 	add.w	r3, r9, r3, lsl #4
  400a6a:	f8d3 231c 	ldr.w	r2, [r3, #796]	; 0x31c
	if (hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(hw, (epn - 1))) {
  400a6e:	07d2      	lsls	r2, r2, #31
  400a70:	f53f af1c 	bmi.w	4008ac <USBHS_Handler+0x16c>
	hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  400a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a78:	fa02 f000 	lsl.w	r0, r2, r0
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  400a7c:	f8c9 0014 	str.w	r0, [r9, #20]
	_usb_d_dev_dma_next(ept);
  400a80:	4620      	mov	r0, r4
}

static inline hri_usbhs_devdmastatus_reg_t hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(const void *const hw,
                                                                                     uint8_t           submodule_index)
{
	return (((Usbhs *)hw)->UsbhsDevdma[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_BUFF_COUNT_Msk)
  400a82:	f8d3 231c 	ldr.w	r2, [r3, #796]	; 0x31c
	if (trans_next) {
  400a86:	0c12      	lsrs	r2, r2, #16
		ept->trans_count -= trans_next;
  400a88:	bf1e      	ittt	ne
  400a8a:	68a3      	ldrne	r3, [r4, #8]
  400a8c:	1a9b      	subne	r3, r3, r2
		ept->trans_size = ept->trans_count;
  400a8e:	e9c4 3301 	strdne	r3, r3, [r4, #4]
	_usb_d_dev_dma_next(ept);
  400a92:	4b01      	ldr	r3, [pc, #4]	; (400a98 <USBHS_Handler+0x358>)
  400a94:	4798      	blx	r3
  400a96:	e709      	b.n	4008ac <USBHS_Handler+0x16c>
  400a98:	00400629 	.word	0x00400629

00400a9c <_usb_d_dev_init>:
{
  400a9c:	b538      	push	{r3, r4, r5, lr}
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  400a9e:	4d0e      	ldr	r5, [pc, #56]	; (400ad8 <_usb_d_dev_init+0x3c>)
  400aa0:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  400aa4:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  400aa8:	041b      	lsls	r3, r3, #16
  400aaa:	d412      	bmi.n	400ad2 <_usb_d_dev_init+0x36>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  400aac:	4b0b      	ldr	r3, [pc, #44]	; (400adc <_usb_d_dev_init+0x40>)
  400aae:	4a0c      	ldr	r2, [pc, #48]	; (400ae0 <_usb_d_dev_init+0x44>)
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  400ab0:	490c      	ldr	r1, [pc, #48]	; (400ae4 <_usb_d_dev_init+0x48>)
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  400ab2:	609a      	str	r2, [r3, #8]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  400ab4:	e9c3 2200 	strd	r2, r2, [r3]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  400ab8:	e9c3 1203 	strd	r1, r2, [r3, #12]
	_usb_d_dev_reset_epts();
  400abc:	4b0a      	ldr	r3, [pc, #40]	; (400ae8 <_usb_d_dev_init+0x4c>)
  400abe:	4798      	blx	r3
	((Usbhs *)hw)->USBHS_CTRL = data;
  400ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	return ERR_NONE;
  400ac4:	4620      	mov	r0, r4
  400ac6:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  400aca:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ace:	602b      	str	r3, [r5, #0]
}
  400ad0:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  400ad2:	f06f 0010 	mvn.w	r0, #16
  400ad6:	e7fb      	b.n	400ad0 <_usb_d_dev_init+0x34>
  400ad8:	40038000 	.word	0x40038000
  400adc:	20400180 	.word	0x20400180
  400ae0:	00400521 	.word	0x00400521
  400ae4:	00400523 	.word	0x00400523
  400ae8:	004005cd 	.word	0x004005cd

00400aec <_usb_d_dev_enable>:
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  400aec:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <_usb_d_dev_enable+0x38>)
  400aee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (!(hri_usbhs_get_CTRL_USBE_bit(hw))) {
  400af2:	0411      	lsls	r1, r2, #16
  400af4:	d40b      	bmi.n	400b0e <_usb_d_dev_enable+0x22>
	((Usbhs *)hw)->USBHS_CTRL &= ~USBHS_CTRL_FRZCLK;
  400af6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  400afa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  400afe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	((Usbhs *)hw)->USBHS_CTRL |= USBHS_CTRL_USBE;
  400b02:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  400b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  400b0a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	return (((Usbhs *)hw)->USBHS_SR & USBHS_SR_CLKUSABLE) >> USBHS_SR_CLKUSABLE_Pos;
  400b0e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
	while (!hri_usbhs_get_SR_CLKUSABLE_bit(hw)) {
  400b12:	0452      	lsls	r2, r2, #17
  400b14:	d5fb      	bpl.n	400b0e <_usb_d_dev_enable+0x22>
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  400b16:	221d      	movs	r2, #29
}
  400b18:	2000      	movs	r0, #0
  400b1a:	619a      	str	r2, [r3, #24]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b1c:	2204      	movs	r2, #4
  400b1e:	4b02      	ldr	r3, [pc, #8]	; (400b28 <_usb_d_dev_enable+0x3c>)
  400b20:	605a      	str	r2, [r3, #4]
  400b22:	4770      	bx	lr
  400b24:	40038000 	.word	0x40038000
  400b28:	e000e100 	.word	0xe000e100

00400b2c <_usb_d_dev_attach>:
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_DETACH;
  400b2c:	4a02      	ldr	r2, [pc, #8]	; (400b38 <_usb_d_dev_attach+0xc>)
  400b2e:	6813      	ldr	r3, [r2, #0]
  400b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400b34:	6013      	str	r3, [r2, #0]
}
  400b36:	4770      	bx	lr
  400b38:	40038000 	.word	0x40038000

00400b3c <_usb_d_dev_get_speed>:
{
  400b3c:	b082      	sub	sp, #8
	const enum usb_speed speed[3] = {USB_SPEED_FS, USB_SPEED_HS, USB_SPEED_LS};
  400b3e:	f240 2201 	movw	r2, #513	; 0x201
	return ((Usbhs *)hw)->USBHS_SR;
  400b42:	4b08      	ldr	r3, [pc, #32]	; (400b64 <_usb_d_dev_get_speed+0x28>)
  400b44:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  400b48:	f8ad 2004 	strh.w	r2, [sp, #4]
  400b4c:	2200      	movs	r2, #0
	sp                            = (enum usb_speed)((sp & USBHS_SR_SPEED_Msk) >> USBHS_SR_SPEED_Pos);
  400b4e:	f3c3 3301 	ubfx	r3, r3, #12, #2
	const enum usb_speed speed[3] = {USB_SPEED_FS, USB_SPEED_HS, USB_SPEED_LS};
  400b52:	f88d 2006 	strb.w	r2, [sp, #6]
	return speed[sp];
  400b56:	aa02      	add	r2, sp, #8
  400b58:	4413      	add	r3, r2
}
  400b5a:	f813 0c04 	ldrb.w	r0, [r3, #-4]
  400b5e:	b002      	add	sp, #8
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	40038000 	.word	0x40038000

00400b68 <_usb_d_dev_set_address>:
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  400b68:	4b06      	ldr	r3, [pc, #24]	; (400b84 <_usb_d_dev_set_address+0x1c>)
	tmp |= USBHS_DEVCTRL_UADD(data);
  400b6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  400b6e:	681a      	ldr	r2, [r3, #0]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  400b70:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	tmp |= USBHS_DEVCTRL_UADD(data);
  400b74:	4310      	orrs	r0, r2
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  400b76:	6018      	str	r0, [r3, #0]
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  400b78:	681a      	ldr	r2, [r3, #0]
  400b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  400b7e:	601a      	str	r2, [r3, #0]
}
  400b80:	4770      	bx	lr
  400b82:	bf00      	nop
  400b84:	40038000 	.word	0x40038000

00400b88 <_usb_d_dev_ep_init>:
{
  400b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400b8c:	4614      	mov	r4, r2
	ASSERT(max_pkt_siz < 1024);
  400b8e:	f240 3aff 	movw	sl, #1023	; 0x3ff
{
  400b92:	4606      	mov	r6, r0
	uint8_t               epn = USB_EP_GET_N(ep);
  400b94:	f000 050f 	and.w	r5, r0, #15
	ASSERT(max_pkt_siz < 1024);
  400b98:	4554      	cmp	r4, sl
	bool                  dir = USB_EP_GET_DIR(ep);
  400b9a:	ea4f 17d0 	mov.w	r7, r0, lsr #7
{
  400b9e:	4689      	mov	r9, r1
	ASSERT(max_pkt_siz < 1024);
  400ba0:	f240 42d5 	movw	r2, #1237	; 0x4d5
  400ba4:	bf8c      	ite	hi
  400ba6:	2000      	movhi	r0, #0
  400ba8:	2001      	movls	r0, #1
  400baa:	493d      	ldr	r1, [pc, #244]	; (400ca0 <_usb_d_dev_ep_init+0x118>)
  400bac:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 400ca8 <_usb_d_dev_ep_init+0x120>
  400bb0:	47c0      	blx	r8
	ASSERT((max_pkt_siz == 1023) || !(max_pkt_siz & (max_pkt_siz - 1)));
  400bb2:	4554      	cmp	r4, sl
  400bb4:	d059      	beq.n	400c6a <_usb_d_dev_ep_init+0xe2>
  400bb6:	1e63      	subs	r3, r4, #1
  400bb8:	4223      	tst	r3, r4
  400bba:	bf0c      	ite	eq
  400bbc:	2001      	moveq	r0, #1
  400bbe:	2000      	movne	r0, #0
  400bc0:	f240 42d6 	movw	r2, #1238	; 0x4d6
  400bc4:	4936      	ldr	r1, [pc, #216]	; (400ca0 <_usb_d_dev_ep_init+0x118>)
  400bc6:	47c0      	blx	r8
	ASSERT(max_pkt_siz >= 8);
  400bc8:	2c07      	cmp	r4, #7
  400bca:	4935      	ldr	r1, [pc, #212]	; (400ca0 <_usb_d_dev_ep_init+0x118>)
  400bcc:	f240 42d7 	movw	r2, #1239	; 0x4d7
  400bd0:	bf94      	ite	ls
  400bd2:	2000      	movls	r0, #0
  400bd4:	2001      	movhi	r0, #1
  400bd6:	47c0      	blx	r8
	if (epn > CONF_USB_D_MAX_EP_N) {
  400bd8:	f016 0f0c 	tst.w	r6, #12
	uint8_t ep_type = attr & USB_EP_XTYPE_MASK;
  400bdc:	f009 0103 	and.w	r1, r9, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
  400be0:	d157      	bne.n	400c92 <_usb_d_dev_ep_init+0x10a>
	if (ept->ep != 0xFF) {
  400be2:	4830      	ldr	r0, [pc, #192]	; (400ca4 <_usb_d_dev_ep_init+0x11c>)
  400be4:	2314      	movs	r3, #20
  400be6:	fb03 0305 	mla	r3, r3, r5, r0
  400bea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  400bee:	2bff      	cmp	r3, #255	; 0xff
  400bf0:	d152      	bne.n	400c98 <_usb_d_dev_ep_init+0x110>
	return ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  400bf2:	00aa      	lsls	r2, r5, #2
  400bf4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  400bf8:	f502 3260 	add.w	r2, r2, #229376	; 0x38000
  400bfc:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
	data &= ~(USBHS_DEVEPTCFG_EPBK_Msk | USBHS_DEVEPTCFG_EPSIZE_Msk | USBHS_DEVEPTCFG_EPDIR
  400c00:	f423 5ecb 	bic.w	lr, r3, #6496	; 0x1960
	switch (ep_type) {
  400c04:	1e4b      	subs	r3, r1, #1
  400c06:	2b01      	cmp	r3, #1
	data &= ~(USBHS_DEVEPTCFG_EPBK_Msk | USBHS_DEVEPTCFG_EPSIZE_Msk | USBHS_DEVEPTCFG_EPDIR
  400c08:	f02e 0e1c 	bic.w	lr, lr, #28
	switch (ep_type) {
  400c0c:	bf8c      	ite	hi
  400c0e:	2300      	movhi	r3, #0
  400c10:	2301      	movls	r3, #1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
  400c12:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
	data |= USBHS_DEVEPTCFG_EPBK(bank) | USBHS_DEVEPTCFG_EPSIZE(_usbd_ep_pcksize_size(max_pkt_siz))
  400c16:	ea4f 0383 	mov.w	r3, r3, lsl #2
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
  400c1a:	d828      	bhi.n	400c6e <_usb_d_dev_ep_init+0xe6>
  400c1c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  400c20:	d828      	bhi.n	400c74 <_usb_d_dev_ep_init+0xec>
  400c22:	2c80      	cmp	r4, #128	; 0x80
  400c24:	d829      	bhi.n	400c7a <_usb_d_dev_ep_init+0xf2>
  400c26:	2c40      	cmp	r4, #64	; 0x40
  400c28:	d82a      	bhi.n	400c80 <_usb_d_dev_ep_init+0xf8>
  400c2a:	2c20      	cmp	r4, #32
  400c2c:	d82b      	bhi.n	400c86 <_usb_d_dev_ep_init+0xfe>
  400c2e:	2c10      	cmp	r4, #16
  400c30:	d82c      	bhi.n	400c8c <_usb_d_dev_ep_init+0x104>
  400c32:	2c08      	cmp	r4, #8
  400c34:	bf94      	ite	ls
  400c36:	f04f 0c00 	movls.w	ip, #0
  400c3a:	f04f 0c01 	movhi.w	ip, #1
  400c3e:	ea43 030e 	orr.w	r3, r3, lr
  400c42:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
	ept->flags.u8 = (ep_type + 1);
  400c46:	3101      	adds	r1, #1
  400c48:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	data |= USBHS_DEVEPTCFG_EPBK(bank) | USBHS_DEVEPTCFG_EPSIZE(_usbd_ep_pcksize_size(max_pkt_siz))
  400c4c:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = data;
  400c50:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	ept->size     = max_pkt_siz;
  400c54:	2314      	movs	r3, #20
  400c56:	fb03 0505 	mla	r5, r3, r5, r0
	return USB_OK;
  400c5a:	2000      	movs	r0, #0
	ept->size     = max_pkt_siz;
  400c5c:	84ac      	strh	r4, [r5, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
  400c5e:	f885 1027 	strb.w	r1, [r5, #39]	; 0x27
	ept->ep       = ep;
  400c62:	f885 6026 	strb.w	r6, [r5, #38]	; 0x26
}
  400c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT((max_pkt_siz == 1023) || !(max_pkt_siz & (max_pkt_siz - 1)));
  400c6a:	2001      	movs	r0, #1
  400c6c:	e7a8      	b.n	400bc0 <_usb_d_dev_ep_init+0x38>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
  400c6e:	f04f 0c07 	mov.w	ip, #7
  400c72:	e7e4      	b.n	400c3e <_usb_d_dev_ep_init+0xb6>
  400c74:	f04f 0c06 	mov.w	ip, #6
  400c78:	e7e1      	b.n	400c3e <_usb_d_dev_ep_init+0xb6>
  400c7a:	f04f 0c05 	mov.w	ip, #5
  400c7e:	e7de      	b.n	400c3e <_usb_d_dev_ep_init+0xb6>
  400c80:	f04f 0c04 	mov.w	ip, #4
  400c84:	e7db      	b.n	400c3e <_usb_d_dev_ep_init+0xb6>
  400c86:	f04f 0c03 	mov.w	ip, #3
  400c8a:	e7d8      	b.n	400c3e <_usb_d_dev_ep_init+0xb6>
  400c8c:	f04f 0c02 	mov.w	ip, #2
  400c90:	e7d5      	b.n	400c3e <_usb_d_dev_ep_init+0xb6>
		return -USB_ERR_PARAM;
  400c92:	f06f 0011 	mvn.w	r0, #17
  400c96:	e7e6      	b.n	400c66 <_usb_d_dev_ep_init+0xde>
		return -USB_ERR_REDO;
  400c98:	f06f 0013 	mvn.w	r0, #19
  400c9c:	e7e3      	b.n	400c66 <_usb_d_dev_ep_init+0xde>
  400c9e:	bf00      	nop
  400ca0:	0040214c 	.word	0x0040214c
  400ca4:	20400180 	.word	0x20400180
  400ca8:	00401219 	.word	0x00401219

00400cac <_usb_d_dev_ep_deinit>:
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  400cac:	f010 0f0c 	tst.w	r0, #12
{
  400cb0:	b570      	push	{r4, r5, r6, lr}
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  400cb2:	d119      	bne.n	400ce8 <_usb_d_dev_ep_deinit+0x3c>
	uint8_t               epn = USB_EP_GET_N(ep);
  400cb4:	f000 040f 	and.w	r4, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  400cb8:	4e0c      	ldr	r6, [pc, #48]	; (400cec <_usb_d_dev_ep_deinit+0x40>)
  400cba:	2314      	movs	r3, #20
  400cbc:	fb03 6504 	mla	r5, r3, r4, r6
  400cc0:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
  400cc4:	2aff      	cmp	r2, #255	; 0xff
  400cc6:	d00f      	beq.n	400ce8 <_usb_d_dev_ep_deinit+0x3c>
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  400cc8:	fb04 3303 	mla	r3, r4, r3, r3
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
  400ccc:	09c1      	lsrs	r1, r0, #7
  400cce:	2203      	movs	r2, #3
  400cd0:	18f0      	adds	r0, r6, r3
  400cd2:	4b07      	ldr	r3, [pc, #28]	; (400cf0 <_usb_d_dev_ep_deinit+0x44>)
  400cd4:	4798      	blx	r3
	((Usbhs *)hw)->USBHS_DEVEPT &= ~mask;
  400cd6:	4907      	ldr	r1, [pc, #28]	; (400cf4 <_usb_d_dev_ep_deinit+0x48>)
	hri_usbhs_clear_DEVEPT_reg(hw, USBHS_DEVEPT_EPEN0 << epn);
  400cd8:	2201      	movs	r2, #1
  400cda:	69cb      	ldr	r3, [r1, #28]
  400cdc:	40a2      	lsls	r2, r4
  400cde:	ea23 0302 	bic.w	r3, r3, r2
  400ce2:	61cb      	str	r3, [r1, #28]
	ept->ep       = 0xFF;
  400ce4:	23ff      	movs	r3, #255	; 0xff
  400ce6:	84eb      	strh	r3, [r5, #38]	; 0x26
}
  400ce8:	bd70      	pop	{r4, r5, r6, pc}
  400cea:	bf00      	nop
  400cec:	20400180 	.word	0x20400180
  400cf0:	00400701 	.word	0x00400701
  400cf4:	40038000 	.word	0x40038000

00400cf8 <_usb_d_dev_ep_enable>:
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  400cf8:	f010 0f0c 	tst.w	r0, #12
	uint8_t               epn          = USB_EP_GET_N(ep);
  400cfc:	f000 030f 	and.w	r3, r0, #15
{
  400d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  400d04:	f040 80ae 	bne.w	400e64 <_usb_d_dev_ep_enable+0x16c>
  400d08:	4958      	ldr	r1, [pc, #352]	; (400e6c <_usb_d_dev_ep_enable+0x174>)
  400d0a:	2214      	movs	r2, #20
  400d0c:	fb02 1203 	mla	r2, r2, r3, r1
  400d10:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
  400d14:	2aff      	cmp	r2, #255	; 0xff
  400d16:	f000 80a5 	beq.w	400e64 <_usb_d_dev_ep_enable+0x16c>
	if (epn == 0) {
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d03c      	beq.n	400d98 <_usb_d_dev_ep_enable+0xa0>
	uint16_t              ep_allocated = 1 << epn;
  400d1e:	2201      	movs	r2, #1
  400d20:	2403      	movs	r4, #3
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  400d22:	4f53      	ldr	r7, [pc, #332]	; (400e70 <_usb_d_dev_ep_enable+0x178>)
  400d24:	fa02 f503 	lsl.w	r5, r2, r3
	return (data & (0x1 << epn));
  400d28:	4694      	mov	ip, r2
	uint16_t              ep_allocated = 1 << epn;
  400d2a:	b2ad      	uxth	r5, r5
		for (i = CONF_USB_D_MAX_EP_N; i > epn; i--) {
  400d2c:	b2e2      	uxtb	r2, r4
  400d2e:	429a      	cmp	r2, r3
  400d30:	d875      	bhi.n	400e1e <_usb_d_dev_ep_enable+0x126>
  400d32:	461c      	mov	r4, r3
				ptr_ep->flags.bits.is_busy      = false;
  400d34:	f04f 0c14 	mov.w	ip, #20
  400d38:	4f4d      	ldr	r7, [pc, #308]	; (400e70 <_usb_d_dev_ep_enable+0x178>)
		data |= 0x1 << epn;
  400d3a:	f04f 0e01 	mov.w	lr, #1
		for (i = epn; i <= CONF_USB_D_MAX_EP_N; i++) {
  400d3e:	b2e2      	uxtb	r2, r4
  400d40:	2a03      	cmp	r2, #3
  400d42:	d838      	bhi.n	400db6 <_usb_d_dev_ep_enable+0xbe>
			if (ep_allocated & (1 << i)) {
  400d44:	fa45 f204 	asr.w	r2, r5, r4
  400d48:	07d2      	lsls	r2, r2, #31
  400d4a:	d523      	bpl.n	400d94 <_usb_d_dev_ep_enable+0x9c>
				ptr_ep->flags.bits.is_busy      = false;
  400d4c:	fb0c 1204 	mla	r2, ip, r4, r1
  400d50:	f892 6027 	ldrb.w	r6, [r2, #39]	; 0x27
  400d54:	f36f 1686 	bfc	r6, #6, #1
  400d58:	f882 6027 	strb.w	r6, [r2, #39]	; 0x27
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_ALLOC;
  400d5c:	00a2      	lsls	r2, r4, #2
  400d5e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  400d62:	f502 3260 	add.w	r2, r2, #229376	; 0x38000
  400d66:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
  400d6a:	f046 0602 	orr.w	r6, r6, #2
  400d6e:	f8c2 6100 	str.w	r6, [r2, #256]	; 0x100
		data |= 0x1 << epn;
  400d72:	fa0e f604 	lsl.w	r6, lr, r4
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  400d76:	f8d7 801c 	ldr.w	r8, [r7, #28]
  400d7a:	ea46 0608 	orr.w	r6, r6, r8
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  400d7e:	61fe      	str	r6, [r7, #28]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CFGOK) >> USBHS_DEVEPTISR_CFGOK_Pos;
  400d80:	f8d2 6130 	ldr.w	r6, [r2, #304]	; 0x130
				if (!_usbd_ep_is_cfg(i)) {
  400d84:	0376      	lsls	r6, r6, #13
  400d86:	d546      	bpl.n	400e16 <_usb_d_dev_ep_enable+0x11e>
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  400d88:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
  400d8c:	f426 7600 	bic.w	r6, r6, #512	; 0x200
  400d90:	f8c2 6100 	str.w	r6, [r2, #256]	; 0x100
		for (i = epn; i <= CONF_USB_D_MAX_EP_N; i++) {
  400d94:	3401      	adds	r4, #1
  400d96:	e7d2      	b.n	400d3e <_usb_d_dev_ep_enable+0x46>
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_ALLOC;
  400d98:	4a35      	ldr	r2, [pc, #212]	; (400e70 <_usb_d_dev_ep_enable+0x178>)
  400d9a:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  400d9e:	f044 0402 	orr.w	r4, r4, #2
  400da2:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  400da6:	69d4      	ldr	r4, [r2, #28]
		data |= 0x1 << epn;
  400da8:	f044 0401 	orr.w	r4, r4, #1
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  400dac:	61d4      	str	r4, [r2, #28]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CFGOK) >> USBHS_DEVEPTISR_CFGOK_Pos;
  400dae:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
		if (!_usbd_ep_is_cfg(0)) {
  400db2:	0354      	lsls	r4, r2, #13
  400db4:	d52f      	bpl.n	400e16 <_usb_d_dev_ep_enable+0x11e>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
  400db6:	2514      	movs	r5, #20
  400db8:	fb05 1203 	mla	r2, r5, r3, r1
  400dbc:	f892 4027 	ldrb.w	r4, [r2, #39]	; 0x27
  400dc0:	f004 0407 	and.w	r4, r4, #7
  400dc4:	2c01      	cmp	r4, #1
  400dc6:	d142      	bne.n	400e4e <_usb_d_dev_ep_enable+0x156>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400dc8:	009a      	lsls	r2, r3, #2
		_usb_d_dev_trans_setup(ept);
  400dca:	fb03 5505 	mla	r5, r3, r5, r5
  400dce:	2002      	movs	r0, #2
  400dd0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  400dd4:	4429      	add	r1, r5
  400dd6:	f502 3260 	add.w	r2, r2, #229376	; 0x38000
  400dda:	f8c2 0160 	str.w	r0, [r2, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  400dde:	f8c2 4190 	str.w	r4, [r2, #400]	; 0x190
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400de2:	7c8b      	ldrb	r3, [r1, #18]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400de4:	2141      	movs	r1, #65	; 0x41
  400de6:	f003 020f 	and.w	r2, r3, #15
  400dea:	4613      	mov	r3, r2
  400dec:	4083      	lsls	r3, r0
  400dee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  400df2:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  400df6:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  400dfa:	2106      	movs	r1, #6
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400dfc:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  400e00:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  400e04:	f8c3 4220 	str.w	r4, [r3, #544]	; 0x220
	hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  400e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400e0c:	4093      	lsls	r3, r2
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  400e0e:	4a18      	ldr	r2, [pc, #96]	; (400e70 <_usb_d_dev_ep_enable+0x178>)
  400e10:	6193      	str	r3, [r2, #24]
	return USB_OK;
  400e12:	2000      	movs	r0, #0
}
  400e14:	e001      	b.n	400e1a <_usb_d_dev_ep_enable+0x122>
			return -USB_ERR_ALLOC_FAIL;
  400e16:	f06f 0014 	mvn.w	r0, #20
}
  400e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  400e1e:	69fa      	ldr	r2, [r7, #28]
	return (data & (0x1 << epn));
  400e20:	fa0c f604 	lsl.w	r6, ip, r4
			if (_usbd_ep_is_enabled(i)) {
  400e24:	4216      	tst	r6, r2
  400e26:	d010      	beq.n	400e4a <_usb_d_dev_ep_enable+0x152>
  400e28:	69fa      	ldr	r2, [r7, #28]
				ep_allocated |= 1 << i;
  400e2a:	4335      	orrs	r5, r6
		data &= ~((uint32_t)0x1 << epn);
  400e2c:	ea22 0206 	bic.w	r2, r2, r6
				ep_allocated |= 1 << i;
  400e30:	b2ad      	uxth	r5, r5
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  400e32:	61fa      	str	r2, [r7, #28]
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_ALLOC;
  400e34:	00a2      	lsls	r2, r4, #2
  400e36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  400e3a:	f502 3260 	add.w	r2, r2, #229376	; 0x38000
  400e3e:	f8d2 6100 	ldr.w	r6, [r2, #256]	; 0x100
  400e42:	f026 0602 	bic.w	r6, r6, #2
  400e46:	f8c2 6100 	str.w	r6, [r2, #256]	; 0x100
		for (i = CONF_USB_D_MAX_EP_N; i > epn; i--) {
  400e4a:	3c01      	subs	r4, #1
  400e4c:	e76e      	b.n	400d2c <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
  400e4e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400e52:	4a07      	ldr	r2, [pc, #28]	; (400e70 <_usb_d_dev_ep_enable+0x178>)
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  400e54:	bf19      	ittee	ne
  400e56:	3364      	addne	r3, #100	; 0x64
  400e58:	2101      	movne	r1, #1
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400e5a:	3358      	addeq	r3, #88	; 0x58
  400e5c:	2102      	moveq	r1, #2
  400e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  400e62:	e7d6      	b.n	400e12 <_usb_d_dev_ep_enable+0x11a>
		return -USB_ERR_PARAM;
  400e64:	f06f 0011 	mvn.w	r0, #17
  400e68:	e7d7      	b.n	400e1a <_usb_d_dev_ep_enable+0x122>
  400e6a:	bf00      	nop
  400e6c:	20400180 	.word	0x20400180
  400e70:	40038000 	.word	0x40038000

00400e74 <_usb_d_dev_ep_stall>:
	if (epn > CONF_USB_D_MAX_EP_N) {
  400e74:	f010 0f0c 	tst.w	r0, #12
{
  400e78:	b570      	push	{r4, r5, r6, lr}
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  400e7a:	f000 040f 	and.w	r4, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N) {
  400e7e:	d178      	bne.n	400f72 <_usb_d_dev_ep_stall+0xfe>
	if (USB_EP_STALL_SET == ctrl) {
  400e80:	4d3f      	ldr	r5, [pc, #252]	; (400f80 <_usb_d_dev_ep_stall+0x10c>)
  400e82:	2214      	movs	r2, #20
  400e84:	2901      	cmp	r1, #1
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400e86:	fb02 5204 	mla	r2, r2, r4, r5
	if (USB_EP_STALL_SET == ctrl) {
  400e8a:	d125      	bne.n	400ed8 <_usb_d_dev_ep_stall+0x64>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400e8c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
	if (epn > CONF_USB_D_MAX_EP_N) {
  400e90:	f013 0f0c 	tst.w	r3, #12
  400e94:	d170      	bne.n	400f78 <_usb_d_dev_ep_stall+0x104>
	if (!ept->flags.bits.is_stalled) {
  400e96:	f892 0027 	ldrb.w	r0, [r2, #39]	; 0x27
  400e9a:	f010 0008 	ands.w	r0, r0, #8
  400e9e:	d001      	beq.n	400ea4 <_usb_d_dev_ep_stall+0x30>
		rc = _usb_d_dev_ep_stall_clr(ept);
  400ea0:	2000      	movs	r0, #0
  400ea2:	e018      	b.n	400ed6 <_usb_d_dev_ep_stall+0x62>
		ept->flags.bits.is_stalled = 1;
  400ea4:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
  400ea8:	f041 0108 	orr.w	r1, r1, #8
  400eac:	f882 1027 	strb.w	r1, [r2, #39]	; 0x27
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400eb0:	f003 010f 	and.w	r1, r3, #15
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  400eb4:	2240      	movs	r2, #64	; 0x40
  400eb6:	008b      	lsls	r3, r1, #2
  400eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  400ebc:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  400ec0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	hri_usbhs_set_DEVIMR_reg(USBHS, USBHS_DEVIMR_PEP_0 << epn);
  400ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400ec8:	408a      	lsls	r2, r1
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  400eca:	492e      	ldr	r1, [pc, #184]	; (400f84 <_usb_d_dev_ep_stall+0x110>)
  400ecc:	618a      	str	r2, [r1, #24]
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  400ece:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ed2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
  400ed6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USB_EP_STALL_CLR == ctrl) {
  400ed8:	2900      	cmp	r1, #0
  400eda:	d145      	bne.n	400f68 <_usb_d_dev_ep_stall+0xf4>
	if (!ept->flags.bits.is_stalled) {
  400edc:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
  400ee0:	070e      	lsls	r6, r1, #28
  400ee2:	d5dd      	bpl.n	400ea0 <_usb_d_dev_ep_stall+0x2c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  400ee4:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  400ee8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400eec:	f003 060f 	and.w	r6, r3, #15
  400ef0:	00b3      	lsls	r3, r6, #2
  400ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  400ef6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  400efa:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  400efe:	2240      	movs	r2, #64	; 0x40
  400f00:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CTRL_STALLEDI) >> USBHS_DEVEPTISR_CTRL_STALLEDI_Pos;
  400f04:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
	if (_usbd_ep_is_stall_sent(epn)) {
  400f08:	0640      	lsls	r0, r0, #25
  400f0a:	d510      	bpl.n	400f2e <_usb_d_dev_ep_stall+0xba>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400f0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	hri_usbhs_set_DEVEPT_reg(hw, USBHS_DEVEPT_EPRST0 << epn);
  400f10:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	((Usbhs *)hw)->USBHS_DEVEPT |= mask;
  400f14:	4a1b      	ldr	r2, [pc, #108]	; (400f84 <_usb_d_dev_ep_stall+0x110>)
  400f16:	40b0      	lsls	r0, r6
  400f18:	69d6      	ldr	r6, [r2, #28]
  400f1a:	4306      	orrs	r6, r0
  400f1c:	61d6      	str	r6, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPT &= ~mask;
  400f1e:	69d6      	ldr	r6, [r2, #28]
  400f20:	ea26 0000 	bic.w	r0, r6, r0
  400f24:	61d0      	str	r0, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  400f26:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400f2a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (_usb_d_dev_ep_is_ctrl(ept)) {
  400f2e:	f001 0107 	and.w	r1, r1, #7
  400f32:	2901      	cmp	r1, #1
  400f34:	d10e      	bne.n	400f54 <_usb_d_dev_ep_stall+0xe0>
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  400f36:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  400f3a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
  400f3e:	d1af      	bne.n	400ea0 <_usb_d_dev_ep_stall+0x2c>
			ept->flags.bits.is_stalled = 0;
  400f40:	2214      	movs	r2, #20
  400f42:	fb02 5204 	mla	r2, r2, r4, r5
  400f46:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
  400f4a:	f360 03c3 	bfi	r3, r0, #3, #1
  400f4e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
  400f52:	e7c0      	b.n	400ed6 <_usb_d_dev_ep_stall+0x62>
		ept->flags.bits.is_stalled = 0;
  400f54:	2214      	movs	r2, #20
  400f56:	fb02 5204 	mla	r2, r2, r4, r5
  400f5a:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
  400f5e:	f36f 03c3 	bfc	r3, #3, #1
  400f62:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
  400f66:	e79b      	b.n	400ea0 <_usb_d_dev_ep_stall+0x2c>
	return ept->flags.bits.is_stalled;
  400f68:	f892 0027 	ldrb.w	r0, [r2, #39]	; 0x27
  400f6c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  400f70:	e7b1      	b.n	400ed6 <_usb_d_dev_ep_stall+0x62>
		return -USB_ERR_PARAM;
  400f72:	f06f 0011 	mvn.w	r0, #17
  400f76:	e7ae      	b.n	400ed6 <_usb_d_dev_ep_stall+0x62>
		return ERR_NOT_FOUND;
  400f78:	f06f 0009 	mvn.w	r0, #9
  400f7c:	e7ab      	b.n	400ed6 <_usb_d_dev_ep_stall+0x62>
  400f7e:	bf00      	nop
  400f80:	20400180 	.word	0x20400180
  400f84:	40038000 	.word	0x40038000

00400f88 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
	uint8_t epn = USB_EP_GET_N(ep);
  400f88:	f000 020f 	and.w	r2, r0, #15

	uint16_t bytes = _usbd_ep_get_trans_count(epn);

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  400f8c:	f010 0f0c 	tst.w	r0, #12
  400f90:	ea4f 0382 	mov.w	r3, r2, lsl #2
  400f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  400f98:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
{
  400f9c:	b530      	push	{r4, r5, lr}
  400f9e:	460c      	mov	r4, r1
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  400fa0:	f8d3 5130 	ldr.w	r5, [r3, #304]	; 0x130
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  400fa4:	d119      	bne.n	400fda <_usb_d_dev_ep_read_req+0x52>
  400fa6:	b1c1      	cbz	r1, 400fda <_usb_d_dev_ep_read_req+0x52>
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  400fa8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  400fac:	f411 5fc0 	tst.w	r1, #6144	; 0x1800
  400fb0:	d116      	bne.n	400fe0 <_usb_d_dev_ep_read_req+0x58>
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CTRL_RXSTPI) >> USBHS_DEVEPTISR_CTRL_RXSTPI_Pos;
  400fb2:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
		return -USB_ERR_FUNC;
	}

	if (!_usbd_ep_is_setup(epn)) {
  400fb6:	f3c1 0080 	ubfx	r0, r1, #2, #1
  400fba:	0749      	lsls	r1, r1, #29
  400fbc:	d50c      	bpl.n	400fd8 <_usb_d_dev_ep_read_req+0x50>
		return ERR_NONE;
	}

	uint8_t *ptr = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  400fbe:	03d2      	lsls	r2, r2, #15
	memcpy(req_buf, (void *)ptr, 8);
  400fc0:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
  400fc4:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
  400fc8:	ca03      	ldmia	r2!, {r0, r1}
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  400fca:	2204      	movs	r2, #4
  400fcc:	6020      	str	r0, [r4, #0]
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  400fce:	f3c5 500a 	ubfx	r0, r5, #20, #11
	memcpy(req_buf, (void *)ptr, 8);
  400fd2:	6061      	str	r1, [r4, #4]
  400fd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

	_usbd_ep_ack_setup(epn);

	return bytes;
}
  400fd8:	bd30      	pop	{r4, r5, pc}
		return -USB_ERR_PARAM;
  400fda:	f06f 0011 	mvn.w	r0, #17
  400fde:	e7fb      	b.n	400fd8 <_usb_d_dev_ep_read_req+0x50>
		return -USB_ERR_FUNC;
  400fe0:	f06f 0012 	mvn.w	r0, #18
  400fe4:	e7f8      	b.n	400fd8 <_usb_d_dev_ep_read_req+0x50>
	...

00400fe8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  400fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Usbhs *               hw  = USBHS;
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  400fec:	7a06      	ldrb	r6, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  400fee:	2414      	movs	r4, #20
  400ff0:	4f48      	ldr	r7, [pc, #288]	; (401114 <_usb_d_dev_ep_trans+0x12c>)
{
  400ff2:	b085      	sub	sp, #20
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  400ff4:	f006 050f 	and.w	r5, r6, #15
{
  400ff8:	4682      	mov	sl, r0
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  400ffa:	fb04 7205 	mla	r2, r4, r5, r7
	bool     size_n_aligned = (trans->size & size_mask);
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  400ffe:	fb04 7405 	mla	r4, r4, r5, r7
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  401002:	f8b2 b024 	ldrh.w	fp, [r2, #36]	; 0x24
  401006:	f240 32ff 	movw	r2, #1023	; 0x3ff
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  40100a:	f894 8027 	ldrb.w	r8, [r4, #39]	; 0x27
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  40100e:	4593      	cmp	fp, r2
  401010:	bf1c      	itt	ne
  401012:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
  401016:	fa1f fb8b 	uxthne.w	fp, fp

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  40101a:	f016 0f0c 	tst.w	r6, #12
  40101e:	d173      	bne.n	401108 <_usb_d_dev_ep_trans+0x120>
		return -USB_ERR_PARAM;
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  401020:	f018 0f08 	tst.w	r8, #8
  401024:	d173      	bne.n	40110e <_usb_d_dev_ep_trans+0x126>
	bool     size_n_aligned = (trans->size & size_mask);
  401026:	6843      	ldr	r3, [r0, #4]
		return USB_HALTED;
	}

	/* Try to start transactions. */
	atomic_enter_critical(&flags);
  401028:	a803      	add	r0, sp, #12
  40102a:	4a3b      	ldr	r2, [pc, #236]	; (401118 <_usb_d_dev_ep_trans+0x130>)
	bool     size_n_aligned = (trans->size & size_mask);
  40102c:	9300      	str	r3, [sp, #0]
	atomic_enter_critical(&flags);
  40102e:	4790      	blx	r2

	if (_usb_d_dev_ep_is_busy(ept)) {
  401030:	f894 9027 	ldrb.w	r9, [r4, #39]	; 0x27
  401034:	4a39      	ldr	r2, [pc, #228]	; (40111c <_usb_d_dev_ep_trans+0x134>)
  401036:	f019 0940 	ands.w	r9, r9, #64	; 0x40
  40103a:	d005      	beq.n	401048 <_usb_d_dev_ep_trans+0x60>
		atomic_leave_critical(&flags);
  40103c:	a803      	add	r0, sp, #12
  40103e:	4790      	blx	r2
		return USB_BUSY;
  401040:	2001      	movs	r0, #1
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
}
  401042:	b005      	add	sp, #20
  401044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ept->flags.bits.is_busy = 1;
  401048:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
  40104c:	f104 0120 	add.w	r1, r4, #32
  401050:	b276      	sxtb	r6, r6
  401052:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  401056:	9101      	str	r1, [sp, #4]
  401058:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	atomic_leave_critical(&flags);
  40105c:	a803      	add	r0, sp, #12
  40105e:	4790      	blx	r2
	ept->trans_buf   = trans->buf;
  401060:	f8da 2000 	ldr.w	r2, [sl]
	ept->flags.bits.dir      = dir;
  401064:	9901      	ldr	r1, [sp, #4]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  401066:	0ff0      	lsrs	r0, r6, #31
	ept->trans_buf   = trans->buf;
  401068:	6162      	str	r2, [r4, #20]
	ept->trans_size  = trans->size;
  40106a:	f8da 2004 	ldr.w	r2, [sl, #4]
	ept->trans_load  = 0;
  40106e:	f8c4 9020 	str.w	r9, [r4, #32]
	ept->trans_count = 0;
  401072:	e9c4 2906 	strd	r2, r9, [r4, #24]
	ept->flags.bits.dir      = dir;
  401076:	79ca      	ldrb	r2, [r1, #7]
  401078:	f360 12c7 	bfi	r2, r0, #7, #1
  40107c:	71ca      	strb	r2, [r1, #7]
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  40107e:	f89a 3009 	ldrb.w	r3, [sl, #9]
  401082:	b12b      	cbz	r3, 401090 <_usb_d_dev_ep_trans+0xa8>
  401084:	9b00      	ldr	r3, [sp, #0]
  401086:	ea1b 0f03 	tst.w	fp, r3
  40108a:	bf0c      	ite	eq
  40108c:	2301      	moveq	r3, #1
  40108e:	2300      	movne	r3, #0
  401090:	2014      	movs	r0, #20
  401092:	fb00 7205 	mla	r2, r0, r5, r7
  401096:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
  40109a:	f363 1104 	bfi	r1, r3, #4, #1
	if (_usb_d_dev_ep_is_dma(epn)) {
  40109e:	1e6b      	subs	r3, r5, #1
  4010a0:	2b05      	cmp	r3, #5
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  4010a2:	f882 1027 	strb.w	r1, [r2, #39]	; 0x27
	if (_usb_d_dev_ep_is_dma(epn)) {
  4010a6:	b22b      	sxth	r3, r5
  4010a8:	d811      	bhi.n	4010ce <_usb_d_dev_ep_trans+0xe6>
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_AUTOSW;
  4010aa:	009b      	lsls	r3, r3, #2
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  4010ac:	fb05 0000 	mla	r0, r5, r0, r0
  4010b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		_usb_d_dev_dma_next(ept);
  4010b4:	4438      	add	r0, r7
  4010b6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  4010ba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  4010be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  4010c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4010c6:	4b16      	ldr	r3, [pc, #88]	; (401120 <_usb_d_dev_ep_trans+0x138>)
  4010c8:	4798      	blx	r3
	return ERR_NONE;
  4010ca:	2000      	movs	r0, #0
}
  4010cc:	e7b9      	b.n	401042 <_usb_d_dev_ep_trans+0x5a>
		if (!is_ctrl) {
  4010ce:	f008 0807 	and.w	r8, r8, #7
  4010d2:	f1b8 0f01 	cmp.w	r8, #1
  4010d6:	d005      	beq.n	4010e4 <_usb_d_dev_ep_trans+0xfc>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4010d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4010dc:	4a11      	ldr	r2, [pc, #68]	; (401124 <_usb_d_dev_ep_trans+0x13c>)
  4010de:	fa00 f505 	lsl.w	r5, r0, r5
  4010e2:	6195      	str	r5, [r2, #24]
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  4010e4:	009b      	lsls	r3, r3, #2
		if (dir) {
  4010e6:	2e00      	cmp	r6, #0
  4010e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  4010ec:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
  4010f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  4010f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  4010f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  4010fc:	bfb4      	ite	lt
  4010fe:	2201      	movlt	r2, #1
  401100:	2202      	movge	r2, #2
  401102:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  401106:	e7e0      	b.n	4010ca <_usb_d_dev_ep_trans+0xe2>
		return -USB_ERR_PARAM;
  401108:	f06f 0011 	mvn.w	r0, #17
  40110c:	e799      	b.n	401042 <_usb_d_dev_ep_trans+0x5a>
		return USB_HALTED;
  40110e:	2002      	movs	r0, #2
  401110:	e797      	b.n	401042 <_usb_d_dev_ep_trans+0x5a>
  401112:	bf00      	nop
  401114:	20400180 	.word	0x20400180
  401118:	004020bd 	.word	0x004020bd
  40111c:	004020cb 	.word	0x004020cb
  401120:	00400629 	.word	0x00400629
  401124:	40038000 	.word	0x40038000

00401128 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  401128:	4b06      	ldr	r3, [pc, #24]	; (401144 <_usb_d_dev_register_callback+0x1c>)
  40112a:	2900      	cmp	r1, #0
  40112c:	bf08      	it	eq
  40112e:	4619      	moveq	r1, r3

	if (type == USB_D_CB_EVENT) {
  401130:	2801      	cmp	r0, #1
  401132:	d102      	bne.n	40113a <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
  401134:	4b04      	ldr	r3, [pc, #16]	; (401148 <_usb_d_dev_register_callback+0x20>)
  401136:	6059      	str	r1, [r3, #4]
  401138:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
  40113a:	b908      	cbnz	r0, 401140 <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
  40113c:	4b02      	ldr	r3, [pc, #8]	; (401148 <_usb_d_dev_register_callback+0x20>)
  40113e:	6019      	str	r1, [r3, #0]
	}
}
  401140:	4770      	bx	lr
  401142:	bf00      	nop
  401144:	00400521 	.word	0x00400521
  401148:	20400180 	.word	0x20400180

0040114c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  40114c:	4b08      	ldr	r3, [pc, #32]	; (401170 <_usb_d_dev_register_ep_callback+0x24>)
  40114e:	2900      	cmp	r1, #0
  401150:	bf08      	it	eq
  401152:	4619      	moveq	r1, r3

	if (type == USB_D_DEV_EP_CB_SETUP) {
  401154:	b910      	cbnz	r0, 40115c <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  401156:	4b07      	ldr	r3, [pc, #28]	; (401174 <_usb_d_dev_register_ep_callback+0x28>)
  401158:	6099      	str	r1, [r3, #8]
  40115a:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  40115c:	2801      	cmp	r0, #1
  40115e:	d102      	bne.n	401166 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  401160:	4b04      	ldr	r3, [pc, #16]	; (401174 <_usb_d_dev_register_ep_callback+0x28>)
  401162:	60d9      	str	r1, [r3, #12]
  401164:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  401166:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  401168:	bf04      	itt	eq
  40116a:	4b02      	ldreq	r3, [pc, #8]	; (401174 <_usb_d_dev_register_ep_callback+0x28>)
  40116c:	6119      	streq	r1, [r3, #16]
	}
}
  40116e:	4770      	bx	lr
  401170:	00400521 	.word	0x00400521
  401174:	20400180 	.word	0x20400180

00401178 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401178:	b507      	push	{r0, r1, r2, lr}
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  40117a:	4b0e      	ldr	r3, [pc, #56]	; (4011b4 <_init_chip+0x3c>)
  40117c:	a801      	add	r0, sp, #4
  40117e:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401180:	4a0d      	ldr	r2, [pc, #52]	; (4011b8 <_init_chip+0x40>)
  401182:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401186:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40118a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40118e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401192:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401196:	4b09      	ldr	r3, [pc, #36]	; (4011bc <_init_chip+0x44>)
  401198:	a801      	add	r0, sp, #4
  40119a:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40119c:	4a08      	ldr	r2, [pc, #32]	; (4011c0 <_init_chip+0x48>)
  40119e:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4011a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4011a4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
	((Efc *)hw)->EEFC_FMR = tmp;
  4011a8:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  4011aa:	4b06      	ldr	r3, [pc, #24]	; (4011c4 <_init_chip+0x4c>)
  4011ac:	4798      	blx	r3
}
  4011ae:	b003      	add	sp, #12
  4011b0:	f85d fb04 	ldr.w	pc, [sp], #4
  4011b4:	004020bd 	.word	0x004020bd
  4011b8:	e000ed00 	.word	0xe000ed00
  4011bc:	004020cb 	.word	0x004020cb
  4011c0:	400e0c00 	.word	0x400e0c00
  4011c4:	0040134d 	.word	0x0040134d

004011c8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4011c8:	6800      	ldr	r0, [r0, #0]
  4011ca:	b900      	cbnz	r0, 4011ce <is_list_element+0x6>
  4011cc:	4770      	bx	lr
		if (it == element) {
  4011ce:	4288      	cmp	r0, r1
  4011d0:	d1fa      	bne.n	4011c8 <is_list_element>
			return true;
  4011d2:	2001      	movs	r0, #1
		}
	}

	return false;
}
  4011d4:	4770      	bx	lr
	...

004011d8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
  4011d8:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
  4011da:	4b0c      	ldr	r3, [pc, #48]	; (40120c <list_insert_at_end+0x34>)
{
  4011dc:	4606      	mov	r6, r0
  4011de:	460c      	mov	r4, r1
	struct list_element *it = list->head;
  4011e0:	6805      	ldr	r5, [r0, #0]
	ASSERT(!is_list_element(list, element));
  4011e2:	4798      	blx	r3
  4011e4:	f080 0001 	eor.w	r0, r0, #1
  4011e8:	4b09      	ldr	r3, [pc, #36]	; (401210 <list_insert_at_end+0x38>)
  4011ea:	224f      	movs	r2, #79	; 0x4f
  4011ec:	4909      	ldr	r1, [pc, #36]	; (401214 <list_insert_at_end+0x3c>)
  4011ee:	b2c0      	uxtb	r0, r0
  4011f0:	4798      	blx	r3

	if (!list->head) {
  4011f2:	6833      	ldr	r3, [r6, #0]
  4011f4:	b913      	cbnz	r3, 4011fc <list_insert_at_end+0x24>
		list->head                             = (struct list_element *)element;
  4011f6:	6034      	str	r4, [r6, #0]
		((struct list_element *)element)->next = NULL;
  4011f8:	6023      	str	r3, [r4, #0]
	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
}
  4011fa:	bd70      	pop	{r4, r5, r6, pc}
	while (it->next) {
  4011fc:	462b      	mov	r3, r5
  4011fe:	682d      	ldr	r5, [r5, #0]
  401200:	2d00      	cmp	r5, #0
  401202:	d1fb      	bne.n	4011fc <list_insert_at_end+0x24>
	it->next                               = (struct list_element *)element;
  401204:	601c      	str	r4, [r3, #0]
	((struct list_element *)element)->next = NULL;
  401206:	6025      	str	r5, [r4, #0]
  401208:	e7f7      	b.n	4011fa <list_insert_at_end+0x22>
  40120a:	bf00      	nop
  40120c:	004011c9 	.word	0x004011c9
  401210:	00401219 	.word	0x00401219
  401214:	00402165 	.word	0x00402165

00401218 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401218:	b900      	cbnz	r0, 40121c <assert+0x4>
		__asm("BKPT #0");
  40121a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
  40121c:	4770      	bx	lr
	...

00401220 <usb_device_cb_bulk_in>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool usb_device_cb_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
  401220:	b508      	push	{r3, lr}
	/* Echo data. */
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
  401222:	f44f 7100 	mov.w	r1, #512	; 0x200
  401226:	4b02      	ldr	r3, [pc, #8]	; (401230 <usb_device_cb_bulk_in+0x10>)
  401228:	4802      	ldr	r0, [pc, #8]	; (401234 <usb_device_cb_bulk_in+0x14>)
  40122a:	4798      	blx	r3

	/* No error. */
	return false;
}
  40122c:	2000      	movs	r0, #0
  40122e:	bd08      	pop	{r3, pc}
  401230:	00400415 	.word	0x00400415
  401234:	204001e4 	.word	0x204001e4

00401238 <usb_device_cb_bulk_out>:
{
  401238:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
  40123a:	4611      	mov	r1, r2
  40123c:	4b02      	ldr	r3, [pc, #8]	; (401248 <usb_device_cb_bulk_out+0x10>)
  40123e:	4803      	ldr	r0, [pc, #12]	; (40124c <usb_device_cb_bulk_out+0x14>)
  401240:	4798      	blx	r3
}
  401242:	2000      	movs	r0, #0
  401244:	bd08      	pop	{r3, pc}
  401246:	bf00      	nop
  401248:	00400441 	.word	0x00400441
  40124c:	204001e4 	.word	0x204001e4

00401250 <usb_device_cb_state_c>:
/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
	if (state.rs232.DTR) {
  401250:	07c3      	lsls	r3, r0, #31
{
  401252:	b513      	push	{r0, r1, r4, lr}
  401254:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
  401258:	d50b      	bpl.n	401272 <usb_device_cb_state_c+0x22>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
  40125a:	4907      	ldr	r1, [pc, #28]	; (401278 <usb_device_cb_state_c+0x28>)
  40125c:	2000      	movs	r0, #0
  40125e:	4c07      	ldr	r4, [pc, #28]	; (40127c <usb_device_cb_state_c+0x2c>)
  401260:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
  401262:	4907      	ldr	r1, [pc, #28]	; (401280 <usb_device_cb_state_c+0x30>)
  401264:	2001      	movs	r0, #1
  401266:	47a0      	blx	r4
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
  401268:	f44f 7100 	mov.w	r1, #512	; 0x200
  40126c:	4805      	ldr	r0, [pc, #20]	; (401284 <usb_device_cb_state_c+0x34>)
  40126e:	4b06      	ldr	r3, [pc, #24]	; (401288 <usb_device_cb_state_c+0x38>)
  401270:	4798      	blx	r3
	}

	/* No error. */
	return false;
}
  401272:	2000      	movs	r0, #0
  401274:	b002      	add	sp, #8
  401276:	bd10      	pop	{r4, pc}
  401278:	00401239 	.word	0x00401239
  40127c:	0040046d 	.word	0x0040046d
  401280:	00401221 	.word	0x00401221
  401284:	204001e4 	.word	0x204001e4
  401288:	00400415 	.word	0x00400415

0040128c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
  40128c:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
  40128e:	4b06      	ldr	r3, [pc, #24]	; (4012a8 <cdc_device_acm_init+0x1c>)
  401290:	4806      	ldr	r0, [pc, #24]	; (4012ac <cdc_device_acm_init+0x20>)
  401292:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
  401294:	4b06      	ldr	r3, [pc, #24]	; (4012b0 <cdc_device_acm_init+0x24>)
  401296:	4798      	blx	r3

	usbdc_start(single_desc);
  401298:	4b06      	ldr	r3, [pc, #24]	; (4012b4 <cdc_device_acm_init+0x28>)
  40129a:	4807      	ldr	r0, [pc, #28]	; (4012b8 <cdc_device_acm_init+0x2c>)
  40129c:	4798      	blx	r3
	usbdc_attach();
  40129e:	4b07      	ldr	r3, [pc, #28]	; (4012bc <cdc_device_acm_init+0x30>)
}
  4012a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbdc_attach();
  4012a4:	4718      	bx	r3
  4012a6:	bf00      	nop
  4012a8:	00401f99 	.word	0x00401f99
  4012ac:	204003e4 	.word	0x204003e4
  4012b0:	004003d1 	.word	0x004003d1
  4012b4:	00402005 	.word	0x00402005
  4012b8:	20400008 	.word	0x20400008
  4012bc:	00402041 	.word	0x00402041

004012c0 <cdcd_acm_example>:
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
	while (!cdcdf_acm_is_enabled()) {
  4012c0:	4c04      	ldr	r4, [pc, #16]	; (4012d4 <cdcd_acm_example+0x14>)
{
  4012c2:	b508      	push	{r3, lr}
	while (!cdcdf_acm_is_enabled()) {
  4012c4:	47a0      	blx	r4
  4012c6:	2800      	cmp	r0, #0
  4012c8:	d0fc      	beq.n	4012c4 <cdcd_acm_example+0x4>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
  4012ca:	4903      	ldr	r1, [pc, #12]	; (4012d8 <cdcd_acm_example+0x18>)
  4012cc:	2003      	movs	r0, #3
  4012ce:	4b03      	ldr	r3, [pc, #12]	; (4012dc <cdcd_acm_example+0x1c>)
  4012d0:	4798      	blx	r3

	while (1) {
  4012d2:	e7fe      	b.n	4012d2 <cdcd_acm_example+0x12>
  4012d4:	004004ad 	.word	0x004004ad
  4012d8:	00401251 	.word	0x00401251
  4012dc:	0040046d 	.word	0x0040046d

004012e0 <usb_init>:
}

void usb_init(void)
{

	cdc_device_acm_init();
  4012e0:	4b00      	ldr	r3, [pc, #0]	; (4012e4 <usb_init+0x4>)
  4012e2:	4718      	bx	r3
  4012e4:	0040128d 	.word	0x0040128d

004012e8 <MCAN0_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN0_INT0_Handler(void)
{
  4012e8:	b538      	push	{r3, r4, r5, lr}
	_can_irq_handler(_can0_dev);
  4012ea:	4b17      	ldr	r3, [pc, #92]	; (401348 <MCAN0_INT0_Handler+0x60>)
  4012ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	ir = hri_mcan_read_IR_reg(dev->hw);
  4012ee:	6823      	ldr	r3, [r4, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  4012f0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
	if (ir & MCAN_IR_RF0N) {
  4012f2:	07e8      	lsls	r0, r5, #31
  4012f4:	d502      	bpl.n	4012fc <MCAN0_INT0_Handler+0x14>
		dev->cb.rx_done(dev);
  4012f6:	68a3      	ldr	r3, [r4, #8]
  4012f8:	4620      	mov	r0, r4
  4012fa:	4798      	blx	r3
	if (ir & MCAN_IR_TC) {
  4012fc:	05aa      	lsls	r2, r5, #22
  4012fe:	d502      	bpl.n	401306 <MCAN0_INT0_Handler+0x1e>
		dev->cb.tx_done(dev);
  401300:	6863      	ldr	r3, [r4, #4]
  401302:	4620      	mov	r0, r4
  401304:	4798      	blx	r3
	if (ir & MCAN_IR_BO) {
  401306:	01ab      	lsls	r3, r5, #6
  401308:	d503      	bpl.n	401312 <MCAN0_INT0_Handler+0x2a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  40130a:	68e3      	ldr	r3, [r4, #12]
  40130c:	2103      	movs	r1, #3
  40130e:	4620      	mov	r0, r4
  401310:	4798      	blx	r3
	if (ir & MCAN_IR_EW) {
  401312:	01e8      	lsls	r0, r5, #7
  401314:	d503      	bpl.n	40131e <MCAN0_INT0_Handler+0x36>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401316:	68e3      	ldr	r3, [r4, #12]
  401318:	2100      	movs	r1, #0
  40131a:	4620      	mov	r0, r4
  40131c:	4798      	blx	r3
	if (ir & MCAN_IR_EP) {
  40131e:	022a      	lsls	r2, r5, #8
  401320:	d509      	bpl.n	401336 <MCAN0_INT0_Handler+0x4e>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401322:	6822      	ldr	r2, [r4, #0]
  401324:	4620      	mov	r0, r4
  401326:	68e3      	ldr	r3, [r4, #12]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401328:	6c52      	ldr	r2, [r2, #68]	; 0x44
  40132a:	f012 0f20 	tst.w	r2, #32
  40132e:	bf14      	ite	ne
  401330:	2102      	movne	r1, #2
  401332:	2101      	moveq	r1, #1
  401334:	4798      	blx	r3
	if (ir & MCAN_IR_RF0L) {
  401336:	072b      	lsls	r3, r5, #28
  401338:	d503      	bpl.n	401342 <MCAN0_INT0_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  40133a:	68e3      	ldr	r3, [r4, #12]
  40133c:	2104      	movs	r1, #4
  40133e:	4620      	mov	r0, r4
  401340:	4798      	blx	r3
	hri_mcan_write_IR_reg(dev->hw, ir);
  401342:	6823      	ldr	r3, [r4, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401344:	651d      	str	r5, [r3, #80]	; 0x50
}
  401346:	bd38      	pop	{r3, r4, r5, pc}
  401348:	20400424 	.word	0x20400424

0040134c <_pmc_init>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  40134c:	4b23      	ldr	r3, [pc, #140]	; (4013dc <_pmc_init+0x90>)
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  40134e:	4a24      	ldr	r2, [pc, #144]	; (4013e0 <_pmc_init+0x94>)
  401350:	6a19      	ldr	r1, [r3, #32]
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401352:	f021 0102 	bic.w	r1, r1, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401356:	430a      	orrs	r2, r1
	((Pmc *)hw)->CKGR_MOR = data;
  401358:	621a      	str	r2, [r3, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40135a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40135c:	07d2      	lsls	r2, r2, #31
  40135e:	d5fc      	bpl.n	40135a <_pmc_init+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401360:	6a1a      	ldr	r2, [r3, #32]
  401362:	f042 729b 	orr.w	r2, r2, #20316160	; 0x1360000
  401366:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40136a:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  40136e:	f022 62ff 	bic.w	r2, r2, #133693440	; 0x7f80000
  401372:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401376:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401378:	4a1a      	ldr	r2, [pc, #104]	; (4013e4 <_pmc_init+0x98>)
  40137a:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40137c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40137e:	0790      	lsls	r0, r2, #30
  401380:	d5fc      	bpl.n	40137c <_pmc_init+0x30>
	((Pmc *)hw)->CKGR_UCKR = data;
  401382:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
  401386:	61da      	str	r2, [r3, #28]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  401388:	6e9a      	ldr	r2, [r3, #104]	; 0x68
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  40138a:	0651      	lsls	r1, r2, #25
  40138c:	d5fc      	bpl.n	401388 <_pmc_init+0x3c>

static inline void hri_pmc_write_MCKR_UPLLDIV2_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	tmp &= ~PMC_MCKR_UPLLDIV2;
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  401390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
	((Pmc *)hw)->PMC_MCKR = tmp;
  401394:	631a      	str	r2, [r3, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401396:	6e9a      	ldr	r2, [r3, #104]	; 0x68
static void _pmc_init_master_clock(void)
{
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401398:	0712      	lsls	r2, r2, #28
  40139a:	d5fc      	bpl.n	401396 <_pmc_init+0x4a>

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40139c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40139e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4013a2:	631a      	str	r2, [r3, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4013a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4013a6:	0710      	lsls	r0, r2, #28
  4013a8:	d5fc      	bpl.n	4013a4 <_pmc_init+0x58>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4013aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4013ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4013b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4013b4:	631a      	str	r2, [r3, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4013b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4013b8:	0711      	lsls	r1, r2, #28
  4013ba:	d5fc      	bpl.n	4013b6 <_pmc_init+0x6a>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4013be:	f022 0203 	bic.w	r2, r2, #3
	tmp |= PMC_MCKR_CSS(data);
  4013c2:	f042 0202 	orr.w	r2, r2, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4013c6:	631a      	str	r2, [r3, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4013c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4013ca:	0712      	lsls	r2, r2, #28
  4013cc:	d5fc      	bpl.n	4013c8 <_pmc_init+0x7c>
}

static inline void hri_pmc_write_USB_reg(const void *const hw, hri_pmc_usb_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_USB = data;
  4013ce:	f240 4201 	movw	r2, #1025	; 0x401
  4013d2:	639a      	str	r2, [r3, #56]	; 0x38
	((Pmc *)hw)->PMC_SCER = data;
  4013d4:	2220      	movs	r2, #32
  4013d6:	601a      	str	r2, [r3, #0]
{
	_pmc_init_sources();
	_pmc_init_master_clock();
	_pmc_init_program_clock();
	_pmc_init_fs_clock();
}
  4013d8:	4770      	bx	lr
  4013da:	bf00      	nop
  4013dc:	400e0600 	.word	0x400e0600
  4013e0:	00373e01 	.word	0x00373e01
  4013e4:	20183f01 	.word	0x20183f01

004013e8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
  4013e8:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
  4013ea:	4288      	cmp	r0, r1
  4013ec:	d301      	bcc.n	4013f2 <usb_find_desc+0xa>
		_desc_len_check();
  4013ee:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
  4013f0:	bd10      	pop	{r4, pc}
		_desc_len_check();
  4013f2:	7803      	ldrb	r3, [r0, #0]
  4013f4:	2b01      	cmp	r3, #1
  4013f6:	d9fa      	bls.n	4013ee <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
  4013f8:	7844      	ldrb	r4, [r0, #1]
  4013fa:	4294      	cmp	r4, r2
  4013fc:	d0f8      	beq.n	4013f0 <usb_find_desc+0x8>
  4013fe:	4418      	add	r0, r3
  401400:	e7f3      	b.n	4013ea <usb_find_desc+0x2>

00401402 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
  401402:	4288      	cmp	r0, r1
  401404:	d301      	bcc.n	40140a <usb_find_ep_desc+0x8>
		_desc_len_check();
  401406:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
  401408:	4770      	bx	lr
		_desc_len_check();
  40140a:	7803      	ldrb	r3, [r0, #0]
  40140c:	2b01      	cmp	r3, #1
  40140e:	d9fa      	bls.n	401406 <usb_find_ep_desc+0x4>
	return desc[1];
  401410:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
  401412:	2a04      	cmp	r2, #4
  401414:	d0f7      	beq.n	401406 <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
  401416:	2a05      	cmp	r2, #5
  401418:	d0f6      	beq.n	401408 <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
  40141a:	4418      	add	r0, r3
  40141c:	e7f1      	b.n	401402 <usb_find_ep_desc>
	...

00401420 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
  401420:	b538      	push	{r3, r4, r5, lr}
  401422:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
  401424:	4b0c      	ldr	r3, [pc, #48]	; (401458 <usb_find_cfg_desc+0x38>)
  401426:	2202      	movs	r2, #2
{
  401428:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
  40142a:	4798      	blx	r3
	if (!desc) {
  40142c:	b978      	cbnz	r0, 40144e <usb_find_cfg_desc+0x2e>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
  40142e:	bd38      	pop	{r3, r4, r5, pc}
		_desc_len_check();
  401430:	7803      	ldrb	r3, [r0, #0]
  401432:	2b01      	cmp	r3, #1
  401434:	d90d      	bls.n	401452 <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
  401436:	7843      	ldrb	r3, [r0, #1]
  401438:	2b02      	cmp	r3, #2
  40143a:	d10a      	bne.n	401452 <usb_find_cfg_desc+0x32>
		if (desc[5] == cfg_value) {
  40143c:	7943      	ldrb	r3, [r0, #5]
  40143e:	42ab      	cmp	r3, r5
  401440:	d0f5      	beq.n	40142e <usb_find_cfg_desc+0xe>
	return (ptr[0] + (ptr[1] << 8));
  401442:	78c2      	ldrb	r2, [r0, #3]
  401444:	7883      	ldrb	r3, [r0, #2]
  401446:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
  40144a:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
  40144e:	42a0      	cmp	r0, r4
  401450:	d3ee      	bcc.n	401430 <usb_find_cfg_desc+0x10>
		return NULL;
  401452:	2000      	movs	r0, #0
  401454:	e7eb      	b.n	40142e <usb_find_cfg_desc+0xe>
  401456:	bf00      	nop
  401458:	004013e9 	.word	0x004013e9

0040145c <usb_find_othspdcfg_desc>:

uint8_t *usb_find_othspdcfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
  40145c:	b538      	push	{r3, r4, r5, lr}
  40145e:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_OTHER_SPEED_CONFIG);
  401460:	4b0c      	ldr	r3, [pc, #48]	; (401494 <usb_find_othspdcfg_desc+0x38>)
  401462:	2207      	movs	r2, #7
{
  401464:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_OTHER_SPEED_CONFIG);
  401466:	4798      	blx	r3
	if (!desc) {
  401468:	b978      	cbnz	r0, 40148a <usb_find_othspdcfg_desc+0x2e>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
  40146a:	bd38      	pop	{r3, r4, r5, pc}
		_desc_len_check();
  40146c:	7803      	ldrb	r3, [r0, #0]
  40146e:	2b01      	cmp	r3, #1
  401470:	d90d      	bls.n	40148e <usb_find_othspdcfg_desc+0x32>
		if (desc[1] != USB_DT_OTHER_SPEED_CONFIG) {
  401472:	7843      	ldrb	r3, [r0, #1]
  401474:	2b07      	cmp	r3, #7
  401476:	d10a      	bne.n	40148e <usb_find_othspdcfg_desc+0x32>
		if (desc[5] == cfg_value) {
  401478:	7943      	ldrb	r3, [r0, #5]
  40147a:	42ab      	cmp	r3, r5
  40147c:	d0f5      	beq.n	40146a <usb_find_othspdcfg_desc+0xe>
	return (ptr[0] + (ptr[1] << 8));
  40147e:	78c2      	ldrb	r2, [r0, #3]
  401480:	7883      	ldrb	r3, [r0, #2]
  401482:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
  401486:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
  40148a:	42a0      	cmp	r0, r4
  40148c:	d3ee      	bcc.n	40146c <usb_find_othspdcfg_desc+0x10>
		return NULL;
  40148e:	2000      	movs	r0, #0
  401490:	e7eb      	b.n	40146a <usb_find_othspdcfg_desc+0xe>
  401492:	bf00      	nop
  401494:	004013e9 	.word	0x004013e9

00401498 <usb_find_str_desc>:

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
  401498:	b570      	push	{r4, r5, r6, lr}
  40149a:	4615      	mov	r5, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
  40149c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
  40149e:	4e08      	ldr	r6, [pc, #32]	; (4014c0 <usb_find_str_desc+0x28>)
	for (i = 0; desc < eof;) {
  4014a0:	4288      	cmp	r0, r1
  4014a2:	d301      	bcc.n	4014a8 <usb_find_str_desc+0x10>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
  4014a4:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
  4014a6:	bd70      	pop	{r4, r5, r6, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
  4014a8:	2203      	movs	r2, #3
  4014aa:	47b0      	blx	r6
		if (desc) {
  4014ac:	2800      	cmp	r0, #0
  4014ae:	d0fa      	beq.n	4014a6 <usb_find_str_desc+0xe>
			_desc_len_check();
  4014b0:	7803      	ldrb	r3, [r0, #0]
  4014b2:	2b01      	cmp	r3, #1
  4014b4:	d9f6      	bls.n	4014a4 <usb_find_str_desc+0xc>
			if (i == str_index) {
  4014b6:	42ac      	cmp	r4, r5
  4014b8:	d0f5      	beq.n	4014a6 <usb_find_str_desc+0xe>
	return (desc + usb_desc_len(desc));
  4014ba:	4418      	add	r0, r3
  4014bc:	3401      	adds	r4, #1
  4014be:	e7ef      	b.n	4014a0 <usb_find_str_desc+0x8>
  4014c0:	004013e9 	.word	0x004013e9

004014c4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
  4014c4:	b570      	push	{r4, r5, r6, lr}
  4014c6:	4a0a      	ldr	r2, [pc, #40]	; (4014f0 <_usb_d_find_ep+0x2c>)
  4014c8:	2300      	movs	r3, #0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  4014ca:	f000 050f 	and.w	r5, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  4014ce:	7854      	ldrb	r4, [r2, #1]
  4014d0:	b259      	sxtb	r1, r3
  4014d2:	4284      	cmp	r4, r0
  4014d4:	d009      	beq.n	4014ea <_usb_d_find_ep+0x26>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  4014d6:	7816      	ldrb	r6, [r2, #0]
  4014d8:	b90e      	cbnz	r6, 4014de <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  4014da:	42ac      	cmp	r4, r5
  4014dc:	d005      	beq.n	4014ea <_usb_d_find_ep+0x26>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4014de:	3301      	adds	r3, #1
  4014e0:	3220      	adds	r2, #32
  4014e2:	2b04      	cmp	r3, #4
  4014e4:	d1f3      	bne.n	4014ce <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
  4014e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
  4014ea:	4608      	mov	r0, r1
  4014ec:	bd70      	pop	{r4, r5, r6, pc}
  4014ee:	bf00      	nop
  4014f0:	20400450 	.word	0x20400450

004014f4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
  4014f4:	2000      	movs	r0, #0
  4014f6:	4770      	bx	lr

004014f8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  4014f8:	b513      	push	{r0, r1, r4, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
  4014fa:	4b0a      	ldr	r3, [pc, #40]	; (401524 <usb_d_cb_trans_more+0x2c>)
{
  4014fc:	4604      	mov	r4, r0
  4014fe:	9101      	str	r1, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401500:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  401502:	4b09      	ldr	r3, [pc, #36]	; (401528 <usb_d_cb_trans_more+0x30>)
  401504:	9901      	ldr	r1, [sp, #4]
  401506:	eb03 1340 	add.w	r3, r3, r0, lsl #5
  40150a:	789a      	ldrb	r2, [r3, #2]
  40150c:	2a03      	cmp	r2, #3
  40150e:	d105      	bne.n	40151c <usb_d_cb_trans_more+0x24>
		return ept->callbacks.more(ep, transfered);
  401510:	699b      	ldr	r3, [r3, #24]
  401512:	4620      	mov	r0, r4
	}
	return false;
}
  401514:	b002      	add	sp, #8
  401516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return ept->callbacks.more(ep, transfered);
  40151a:	4718      	bx	r3
}
  40151c:	2000      	movs	r0, #0
  40151e:	b002      	add	sp, #8
  401520:	bd10      	pop	{r4, pc}
  401522:	bf00      	nop
  401524:	004014c5 	.word	0x004014c5
  401528:	20400450 	.word	0x20400450

0040152c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  40152c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401530:	460f      	mov	r7, r1
  401532:	b085      	sub	sp, #20
	int8_t           ep_index = _usb_d_find_ep(ep);
  401534:	4b37      	ldr	r3, [pc, #220]	; (401614 <_usb_d_cb_trans_done+0xe8>)
{
  401536:	4680      	mov	r8, r0
  401538:	4691      	mov	r9, r2
  40153a:	4c37      	ldr	r4, [pc, #220]	; (401618 <_usb_d_cb_trans_done+0xec>)
	int8_t           ep_index = _usb_d_find_ep(ep);
  40153c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
  40153e:	0146      	lsls	r6, r0, #5
  401540:	2f00      	cmp	r7, #0
  401542:	d145      	bne.n	4015d0 <_usb_d_cb_trans_done+0xa4>
		ept->xfer.hdr.status = USB_XFER_DONE;
  401544:	19a5      	adds	r5, r4, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  401546:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
  401548:	70ef      	strb	r7, [r5, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  40154a:	2900      	cmp	r1, #0
  40154c:	d137      	bne.n	4015be <_usb_d_cb_trans_done+0x92>
	if (state == USB_EP_S_X_DATA) {
  40154e:	2320      	movs	r3, #32
  401550:	220c      	movs	r2, #12
  401552:	fb13 2000 	smlabb	r0, r3, r0, r2
  401556:	78ab      	ldrb	r3, [r5, #2]
  401558:	2b03      	cmp	r3, #3
  40155a:	eb04 0200 	add.w	r2, r4, r0
  40155e:	69eb      	ldr	r3, [r5, #28]
  401560:	7868      	ldrb	r0, [r5, #1]
  401562:	d128      	bne.n	4015b6 <_usb_d_cb_trans_done+0x8a>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  401564:	2101      	movs	r1, #1
  401566:	f995 400c 	ldrsb.w	r4, [r5, #12]
  40156a:	4798      	blx	r3
		if (err) {
  40156c:	786b      	ldrb	r3, [r5, #1]
  40156e:	b170      	cbz	r0, 40158e <_usb_d_cb_trans_done+0x62>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  401570:	2c00      	cmp	r4, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  401572:	f240 2205 	movw	r2, #517	; 0x205
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  401576:	f04f 0101 	mov.w	r1, #1
  40157a:	bfb4      	ite	lt
  40157c:	4618      	movlt	r0, r3
  40157e:	f043 0080 	orrge.w	r0, r3, #128	; 0x80
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  401582:	806a      	strh	r2, [r5, #2]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  401584:	4b25      	ldr	r3, [pc, #148]	; (40161c <_usb_d_cb_trans_done+0xf0>)
  401586:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
  401588:	b005      	add	sp, #20
  40158a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct usb_d_transfer trans
  40158e:	2c00      	cmp	r4, #0
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  401590:	f04f 0204 	mov.w	r2, #4
	struct usb_d_transfer trans
  401594:	bfac      	ite	ge
  401596:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
  40159a:	f003 030f 	andlt.w	r3, r3, #15
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  40159e:	70aa      	strb	r2, [r5, #2]
	struct usb_d_transfer trans
  4015a0:	f88d 300c 	strb.w	r3, [sp, #12]
  4015a4:	2301      	movs	r3, #1
  4015a6:	e9cd 0001 	strd	r0, r0, [sp, #4]
  4015aa:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
  4015ae:	a801      	add	r0, sp, #4
  4015b0:	4b1b      	ldr	r3, [pc, #108]	; (401620 <_usb_d_cb_trans_done+0xf4>)
  4015b2:	4798      	blx	r3
  4015b4:	e7e8      	b.n	401588 <_usb_d_cb_trans_done+0x5c>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  4015b6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  4015b8:	2302      	movs	r3, #2
  4015ba:	70ab      	strb	r3, [r5, #2]
  4015bc:	e7e4      	b.n	401588 <_usb_d_cb_trans_done+0x5c>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  4015be:	2301      	movs	r3, #1
  4015c0:	70ab      	strb	r3, [r5, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  4015c2:	4434      	add	r4, r6
  4015c4:	464a      	mov	r2, r9
  4015c6:	4640      	mov	r0, r8
  4015c8:	69e3      	ldr	r3, [r4, #28]
  4015ca:	78e1      	ldrb	r1, [r4, #3]
  4015cc:	4798      	blx	r3
  4015ce:	e7db      	b.n	401588 <_usb_d_cb_trans_done+0x5c>
	} else if (code == USB_TRANS_STALL) {
  4015d0:	2f01      	cmp	r7, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
  4015d2:	eb04 0306 	add.w	r3, r4, r6
	} else if (code == USB_TRANS_STALL) {
  4015d6:	d10b      	bne.n	4015f0 <_usb_d_cb_trans_done+0xc4>
		ept->xfer.hdr.status = USB_XFER_HALT;
  4015d8:	2202      	movs	r2, #2
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  4015da:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
  4015dc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  4015de:	b921      	cbnz	r1, 4015ea <_usb_d_cb_trans_done+0xbe>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  4015e0:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  4015e2:	4640      	mov	r0, r8
  4015e4:	4b0d      	ldr	r3, [pc, #52]	; (40161c <_usb_d_cb_trans_done+0xf0>)
  4015e6:	4798      	blx	r3
  4015e8:	e7eb      	b.n	4015c2 <_usb_d_cb_trans_done+0x96>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  4015ea:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  4015ec:	709a      	strb	r2, [r3, #2]
  4015ee:	e7e8      	b.n	4015c2 <_usb_d_cb_trans_done+0x96>
	} else if (code == USB_TRANS_ABORT) {
  4015f0:	2f02      	cmp	r7, #2
  4015f2:	d107      	bne.n	401604 <_usb_d_cb_trans_done+0xd8>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  4015f4:	2204      	movs	r2, #4
  4015f6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  4015f8:	5da2      	ldrb	r2, [r4, r6]
  4015fa:	b90a      	cbnz	r2, 401600 <_usb_d_cb_trans_done+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  4015fc:	709f      	strb	r7, [r3, #2]
			return;
  4015fe:	e7c3      	b.n	401588 <_usb_d_cb_trans_done+0x5c>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  401600:	2201      	movs	r2, #1
  401602:	e7f3      	b.n	4015ec <_usb_d_cb_trans_done+0xc0>
	} else if (code == USB_TRANS_RESET) {
  401604:	2f03      	cmp	r7, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  401606:	bf0c      	ite	eq
  401608:	f44f 62a0 	moveq.w	r2, #1280	; 0x500
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  40160c:	f240 6206 	movwne	r2, #1542	; 0x606
  401610:	805a      	strh	r2, [r3, #2]
  401612:	e7d6      	b.n	4015c2 <_usb_d_cb_trans_done+0x96>
  401614:	004014c5 	.word	0x004014c5
  401618:	20400450 	.word	0x20400450
  40161c:	00400e75 	.word	0x00400e75
  401620:	00400fe9 	.word	0x00400fe9

00401624 <usb_d_cb_trans_setup>:
{
  401624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
  401628:	4b18      	ldr	r3, [pc, #96]	; (40168c <usb_d_cb_trans_setup+0x68>)
{
  40162a:	4604      	mov	r4, r0
	uint8_t *        req      = ept->xfer.req;
  40162c:	f04f 0820 	mov.w	r8, #32
	int8_t           ep_index = _usb_d_find_ep(ep);
  401630:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
  401632:	230c      	movs	r3, #12
  401634:	4f16      	ldr	r7, [pc, #88]	; (401690 <usb_d_cb_trans_setup+0x6c>)
	int8_t           ep_index = _usb_d_find_ep(ep);
  401636:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
  401638:	f044 0980 	orr.w	r9, r4, #128	; 0x80
  40163c:	fb18 3800 	smlabb	r8, r8, r0, r3
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  401640:	4620      	mov	r0, r4
  401642:	4b14      	ldr	r3, [pc, #80]	; (401694 <usb_d_cb_trans_setup+0x70>)
	uint8_t *        req      = ept->xfer.req;
  401644:	44b8      	add	r8, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  401646:	4d14      	ldr	r5, [pc, #80]	; (401698 <usb_d_cb_trans_setup+0x74>)
  401648:	4641      	mov	r1, r8
  40164a:	4798      	blx	r3
	if (n != 8) {
  40164c:	b2c0      	uxtb	r0, r0
  40164e:	2808      	cmp	r0, #8
  401650:	d008      	beq.n	401664 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  401652:	2101      	movs	r1, #1
  401654:	4620      	mov	r0, r4
  401656:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  401658:	4648      	mov	r0, r9
  40165a:	462b      	mov	r3, r5
  40165c:	2101      	movs	r1, #1
}
  40165e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  401662:	4718      	bx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  401664:	eb07 1646 	add.w	r6, r7, r6, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  401668:	2100      	movs	r1, #0
  40166a:	4620      	mov	r0, r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  40166c:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  40166e:	47a8      	blx	r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  401670:	2100      	movs	r1, #0
  401672:	4648      	mov	r0, r9
  401674:	47a8      	blx	r5
	if (!ept->callbacks.req(ep, req)) {
  401676:	6973      	ldr	r3, [r6, #20]
  401678:	4641      	mov	r1, r8
  40167a:	4620      	mov	r0, r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  40167c:	70b7      	strb	r7, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
  40167e:	4798      	blx	r3
  401680:	b910      	cbnz	r0, 401688 <usb_d_cb_trans_setup+0x64>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  401682:	2305      	movs	r3, #5
  401684:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  401686:	e7e4      	b.n	401652 <usb_d_cb_trans_setup+0x2e>
}
  401688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40168c:	004014c5 	.word	0x004014c5
  401690:	20400450 	.word	0x20400450
  401694:	00400f89 	.word	0x00400f89
  401698:	00400e75 	.word	0x00400e75

0040169c <usb_d_init>:

int32_t usb_d_init(void)
{
	int32_t rc = _usb_d_dev_init();
  40169c:	4b11      	ldr	r3, [pc, #68]	; (4016e4 <usb_d_init+0x48>)
{
  40169e:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
  4016a0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
  4016a2:	2800      	cmp	r0, #0
  4016a4:	db1c      	blt.n	4016e0 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  4016a6:	2280      	movs	r2, #128	; 0x80
  4016a8:	2100      	movs	r1, #0
  4016aa:	4b0f      	ldr	r3, [pc, #60]	; (4016e8 <usb_d_init+0x4c>)
  4016ac:	480f      	ldr	r0, [pc, #60]	; (4016ec <usb_d_init+0x50>)
  4016ae:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4016b0:	4b0e      	ldr	r3, [pc, #56]	; (4016ec <usb_d_init+0x50>)
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  4016b2:	2200      	movs	r2, #0
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  4016b4:	20ff      	movs	r0, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  4016b6:	490e      	ldr	r1, [pc, #56]	; (4016f0 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  4016b8:	3201      	adds	r2, #1
  4016ba:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  4016bc:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4016be:	2a04      	cmp	r2, #4
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  4016c0:	e9c3 1105 	strd	r1, r1, [r3, #20]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4016c4:	f103 0320 	add.w	r3, r3, #32
  4016c8:	d1f6      	bne.n	4016b8 <usb_d_init+0x1c>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  4016ca:	4c0a      	ldr	r4, [pc, #40]	; (4016f4 <usb_d_init+0x58>)
  4016cc:	2000      	movs	r0, #0
  4016ce:	490a      	ldr	r1, [pc, #40]	; (4016f8 <usb_d_init+0x5c>)
  4016d0:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  4016d2:	490a      	ldr	r1, [pc, #40]	; (4016fc <usb_d_init+0x60>)
  4016d4:	2001      	movs	r0, #1
  4016d6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  4016d8:	2002      	movs	r0, #2
  4016da:	4909      	ldr	r1, [pc, #36]	; (401700 <usb_d_init+0x64>)
  4016dc:	47a0      	blx	r4
	return ERR_NONE;
  4016de:	2000      	movs	r0, #0
}
  4016e0:	bd10      	pop	{r4, pc}
  4016e2:	bf00      	nop
  4016e4:	00400a9d 	.word	0x00400a9d
  4016e8:	0040213d 	.word	0x0040213d
  4016ec:	20400450 	.word	0x20400450
  4016f0:	004014f5 	.word	0x004014f5
  4016f4:	0040114d 	.word	0x0040114d
  4016f8:	00401625 	.word	0x00401625
  4016fc:	004014f9 	.word	0x004014f9
  401700:	0040152d 	.word	0x0040152d

00401704 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
  401704:	4b00      	ldr	r3, [pc, #0]	; (401708 <usb_d_register_callback+0x4>)
  401706:	4718      	bx	r3
  401708:	00401129 	.word	0x00401129

0040170c <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
  40170c:	4b00      	ldr	r3, [pc, #0]	; (401710 <usb_d_enable+0x4>)
  40170e:	4718      	bx	r3
  401710:	00400aed 	.word	0x00400aed

00401714 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
  401714:	4b00      	ldr	r3, [pc, #0]	; (401718 <usb_d_attach+0x4>)
  401716:	4718      	bx	r3
  401718:	00400b2d 	.word	0x00400b2d

0040171c <usb_d_get_speed>:
	_usb_d_dev_detach();
}

enum usb_speed usb_d_get_speed(void)
{
	return _usb_d_dev_get_speed();
  40171c:	4b00      	ldr	r3, [pc, #0]	; (401720 <usb_d_get_speed+0x4>)
  40171e:	4718      	bx	r3
  401720:	00400b3d 	.word	0x00400b3d

00401724 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
  401724:	4b00      	ldr	r3, [pc, #0]	; (401728 <usb_d_set_address+0x4>)
  401726:	4718      	bx	r3
  401728:	00400b69 	.word	0x00400b69

0040172c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
  40172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
  40172e:	4c11      	ldr	r4, [pc, #68]	; (401774 <usb_d_ep_init+0x48>)
{
  401730:	4606      	mov	r6, r0
  401732:	460d      	mov	r5, r1
  401734:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
  401736:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
  401738:	2800      	cmp	r0, #0
  40173a:	da14      	bge.n	401766 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
  40173c:	20ff      	movs	r0, #255	; 0xff
  40173e:	47a0      	blx	r4
		if (ep_index < 0) {
  401740:	1e04      	subs	r4, r0, #0
  401742:	db13      	blt.n	40176c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
  401744:	463a      	mov	r2, r7
  401746:	4629      	mov	r1, r5
  401748:	4630      	mov	r0, r6
  40174a:	4b0b      	ldr	r3, [pc, #44]	; (401778 <usb_d_ep_init+0x4c>)
  40174c:	4798      	blx	r3
	if (rc < 0) {
  40174e:	2800      	cmp	r0, #0
  401750:	db08      	blt.n	401764 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
  401752:	4b0a      	ldr	r3, [pc, #40]	; (40177c <usb_d_ep_init+0x50>)
  401754:	0162      	lsls	r2, r4, #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
  401756:	f005 0503 	and.w	r5, r5, #3
	return ERR_NONE;
  40175a:	2000      	movs	r0, #0
	ept->xfer.hdr.ep   = ep;
  40175c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
  401760:	549d      	strb	r5, [r3, r2]
	ept->xfer.hdr.ep   = ep;
  401762:	7066      	strb	r6, [r4, #1]
}
  401764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
  401766:	f06f 0013 	mvn.w	r0, #19
  40176a:	e7fb      	b.n	401764 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
  40176c:	f06f 0014 	mvn.w	r0, #20
  401770:	e7f8      	b.n	401764 <usb_d_ep_init+0x38>
  401772:	bf00      	nop
  401774:	004014c5 	.word	0x004014c5
  401778:	00400b89 	.word	0x00400b89
  40177c:	20400450 	.word	0x20400450

00401780 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
  401780:	2100      	movs	r1, #0
{
  401782:	4602      	mov	r2, r0
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
  401784:	4b01      	ldr	r3, [pc, #4]	; (40178c <usb_d_ep0_init+0xc>)
  401786:	4608      	mov	r0, r1
  401788:	4718      	bx	r3
  40178a:	bf00      	nop
  40178c:	0040172d 	.word	0x0040172d

00401790 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
  401790:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
  401792:	4b07      	ldr	r3, [pc, #28]	; (4017b0 <usb_d_ep_deinit+0x20>)
{
  401794:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
  401796:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
  401798:	1e04      	subs	r4, r0, #0
  40179a:	db07      	blt.n	4017ac <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
  40179c:	4628      	mov	r0, r5
  40179e:	4b05      	ldr	r3, [pc, #20]	; (4017b4 <usb_d_ep_deinit+0x24>)
  4017a0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
  4017a2:	4805      	ldr	r0, [pc, #20]	; (4017b8 <usb_d_ep_deinit+0x28>)
  4017a4:	23ff      	movs	r3, #255	; 0xff
  4017a6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  4017aa:	7043      	strb	r3, [r0, #1]
}
  4017ac:	bd38      	pop	{r3, r4, r5, pc}
  4017ae:	bf00      	nop
  4017b0:	004014c5 	.word	0x004014c5
  4017b4:	00400cad 	.word	0x00400cad
  4017b8:	20400450 	.word	0x20400450

004017bc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
  4017bc:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
  4017be:	4b0c      	ldr	r3, [pc, #48]	; (4017f0 <usb_d_ep_enable+0x34>)
{
  4017c0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
  4017c2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
  4017c4:	1e03      	subs	r3, r0, #0
  4017c6:	db10      	blt.n	4017ea <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
  4017c8:	015b      	lsls	r3, r3, #5
  4017ca:	4c0a      	ldr	r4, [pc, #40]	; (4017f4 <usb_d_ep_enable+0x38>)
	rc                  = _usb_d_dev_ep_enable(ep);
  4017cc:	4628      	mov	r0, r5
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
  4017ce:	5ce2      	ldrb	r2, [r4, r3]
  4017d0:	441c      	add	r4, r3
	rc                  = _usb_d_dev_ep_enable(ep);
  4017d2:	4b09      	ldr	r3, [pc, #36]	; (4017f8 <usb_d_ep_enable+0x3c>)
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
  4017d4:	2a00      	cmp	r2, #0
  4017d6:	bf0c      	ite	eq
  4017d8:	2202      	moveq	r2, #2
  4017da:	2201      	movne	r2, #1
  4017dc:	70a2      	strb	r2, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
  4017de:	4798      	blx	r3
	if (rc < 0) {
  4017e0:	2800      	cmp	r0, #0
  4017e2:	da01      	bge.n	4017e8 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
  4017e4:	2300      	movs	r3, #0
  4017e6:	70a3      	strb	r3, [r4, #2]
	}
	return rc;
}
  4017e8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
  4017ea:	f06f 0011 	mvn.w	r0, #17
  4017ee:	e7fb      	b.n	4017e8 <usb_d_ep_enable+0x2c>
  4017f0:	004014c5 	.word	0x004014c5
  4017f4:	20400450 	.word	0x20400450
  4017f8:	00400cf9 	.word	0x00400cf9

004017fc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
  4017fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
  401800:	f890 8008 	ldrb.w	r8, [r0, #8]
{
  401804:	4605      	mov	r5, r0
  401806:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
  401808:	4b30      	ldr	r3, [pc, #192]	; (4018cc <usb_d_ep_transfer+0xd0>)
  40180a:	4640      	mov	r0, r8
  40180c:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
  40180e:	1e04      	subs	r4, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
  401810:	7a6f      	ldrb	r7, [r5, #9]
	uint32_t              len = xfer->size;
  401812:	686e      	ldr	r6, [r5, #4]
	if (ep_index < 0) {
  401814:	db55      	blt.n	4018c2 <usb_d_ep_transfer+0xc6>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
  401816:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 4018e0 <usb_d_ep_transfer+0xe4>
  40181a:	ea4f 1b44 	mov.w	fp, r4, lsl #5
	atomic_enter_critical(&flags);
  40181e:	4b2c      	ldr	r3, [pc, #176]	; (4018d0 <usb_d_ep_transfer+0xd4>)
  401820:	a802      	add	r0, sp, #8
	state = ept->xfer.hdr.state;
  401822:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
	atomic_enter_critical(&flags);
  401826:	4798      	blx	r3
	state = ept->xfer.hdr.state;
  401828:	78a3      	ldrb	r3, [r4, #2]
  40182a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
  40182e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401832:	2b01      	cmp	r3, #1
  401834:	fa5f f983 	uxtb.w	r9, r3
  401838:	4b26      	ldr	r3, [pc, #152]	; (4018d4 <usb_d_ep_transfer+0xd8>)
  40183a:	d11a      	bne.n	401872 <usb_d_ep_transfer+0x76>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
  40183c:	2203      	movs	r2, #3
		atomic_leave_critical(&flags);
  40183e:	a802      	add	r0, sp, #8
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
  401840:	70a2      	strb	r2, [r4, #2]
		atomic_leave_critical(&flags);
  401842:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  401844:	f81a 300b 	ldrb.w	r3, [sl, fp]
  401848:	b1fb      	cbz	r3, 40188a <usb_d_ep_transfer+0x8e>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
  40184a:	1e3b      	subs	r3, r7, #0
  40184c:	ea4f 12d8 	mov.w	r2, r8, lsr #7
  401850:	bf18      	it	ne
  401852:	2301      	movne	r3, #1
	struct usb_d_transfer trans
  401854:	6828      	ldr	r0, [r5, #0]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
  401856:	7a29      	ldrb	r1, [r5, #8]
	struct usb_d_transfer trans
  401858:	e9cd 0603 	strd	r0, r6, [sp, #12]
  40185c:	b372      	cbz	r2, 4018bc <usb_d_ep_transfer+0xc0>
  40185e:	f041 0280 	orr.w	r2, r1, #128	; 0x80
  401862:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
  401866:	a803      	add	r0, sp, #12
  401868:	4b1b      	ldr	r3, [pc, #108]	; (4018d8 <usb_d_ep_transfer+0xdc>)
	struct usb_d_transfer trans
  40186a:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
  40186e:	4798      	blx	r3
	return rc;
  401870:	e008      	b.n	401884 <usb_d_ep_transfer+0x88>
		atomic_leave_critical(&flags);
  401872:	a802      	add	r0, sp, #8
  401874:	4798      	blx	r3
		switch (state) {
  401876:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40187a:	2b06      	cmp	r3, #6
  40187c:	b2da      	uxtb	r2, r3
  40187e:	d823      	bhi.n	4018c8 <usb_d_ep_transfer+0xcc>
  401880:	4b16      	ldr	r3, [pc, #88]	; (4018dc <usb_d_ep_transfer+0xe0>)
  401882:	5698      	ldrsb	r0, [r3, r2]
}
  401884:	b007      	add	sp, #28
  401886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
  40188a:	7ce1      	ldrb	r1, [r4, #19]
  40188c:	7ca2      	ldrb	r2, [r4, #18]
  40188e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  401892:	b292      	uxth	r2, r2
		if (req_len == 0) {
  401894:	b92a      	cbnz	r2, 4018a2 <usb_d_ep_transfer+0xa6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  401896:	2304      	movs	r3, #4
			len                 = 0;
  401898:	4616      	mov	r6, r2
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  40189a:	70a3      	strb	r3, [r4, #2]
			zlp                 = true;
  40189c:	464b      	mov	r3, r9
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
  40189e:	461a      	mov	r2, r3
  4018a0:	e7d8      	b.n	401854 <usb_d_ep_transfer+0x58>
			if (len > req_len) {
  4018a2:	4296      	cmp	r6, r2
			if (dir) {
  4018a4:	f994 100c 	ldrsb.w	r1, [r4, #12]
  4018a8:	bf28      	it	cs
  4018aa:	4616      	movcs	r6, r2
  4018ac:	2900      	cmp	r1, #0
  4018ae:	daf6      	bge.n	40189e <usb_d_ep_transfer+0xa2>
				zlp = (req_len > len);
  4018b0:	42b2      	cmp	r2, r6
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
  4018b2:	464a      	mov	r2, r9
				zlp = (req_len > len);
  4018b4:	bf94      	ite	ls
  4018b6:	2300      	movls	r3, #0
  4018b8:	2301      	movhi	r3, #1
  4018ba:	e7cb      	b.n	401854 <usb_d_ep_transfer+0x58>
	struct usb_d_transfer trans
  4018bc:	f001 020f 	and.w	r2, r1, #15
  4018c0:	e7cf      	b.n	401862 <usb_d_ep_transfer+0x66>
		return -USB_ERR_PARAM;
  4018c2:	f06f 0011 	mvn.w	r0, #17
  4018c6:	e7dd      	b.n	401884 <usb_d_ep_transfer+0x88>
		switch (state) {
  4018c8:	2001      	movs	r0, #1
  4018ca:	e7db      	b.n	401884 <usb_d_ep_transfer+0x88>
  4018cc:	004014c5 	.word	0x004014c5
  4018d0:	004020bd 	.word	0x004020bd
  4018d4:	004020cb 	.word	0x004020cb
  4018d8:	00400fe9 	.word	0x00400fe9
  4018dc:	00402183 	.word	0x00402183
  4018e0:	20400450 	.word	0x20400450

004018e4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
  4018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4018e8:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
  4018ea:	460c      	mov	r4, r1
  4018ec:	b9d9      	cbnz	r1, 401926 <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
  4018ee:	4b13      	ldr	r3, [pc, #76]	; (40193c <usb_d_ep_halt+0x58>)
  4018f0:	4798      	blx	r3
	if (ep_index < 0) {
  4018f2:	1e06      	subs	r6, r0, #0
  4018f4:	db1e      	blt.n	401934 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
  4018f6:	2102      	movs	r1, #2
  4018f8:	4628      	mov	r0, r5
  4018fa:	4f11      	ldr	r7, [pc, #68]	; (401940 <usb_d_ep_halt+0x5c>)
  4018fc:	47b8      	blx	r7
  4018fe:	b180      	cbz	r0, 401922 <usb_d_ep_halt+0x3e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  401900:	4621      	mov	r1, r4
  401902:	4628      	mov	r0, r5
  401904:	47b8      	blx	r7
		if (rc < 0) {
  401906:	2800      	cmp	r0, #0
  401908:	db0b      	blt.n	401922 <usb_d_ep_halt+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
  40190a:	480e      	ldr	r0, [pc, #56]	; (401944 <usb_d_ep_halt+0x60>)
  40190c:	f240 3301 	movw	r3, #769	; 0x301
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
  401910:	4622      	mov	r2, r4
  401912:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
  401914:	eb00 1046 	add.w	r0, r0, r6, lsl #5
  401918:	8043      	strh	r3, [r0, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
  40191a:	69c3      	ldr	r3, [r0, #28]
  40191c:	4628      	mov	r0, r5
  40191e:	4798      	blx	r3
	return ERR_NONE;
  401920:	4620      	mov	r0, r4
	} else if (ctrl == USB_EP_HALT_SET) {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
	}
}
  401922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (ctrl == USB_EP_HALT_SET) {
  401926:	2901      	cmp	r1, #1
  401928:	4b05      	ldr	r3, [pc, #20]	; (401940 <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
  40192a:	bf18      	it	ne
  40192c:	2102      	movne	r1, #2
}
  40192e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
  401932:	4718      	bx	r3
		return -USB_ERR_PARAM;
  401934:	f06f 0011 	mvn.w	r0, #17
  401938:	e7f3      	b.n	401922 <usb_d_ep_halt+0x3e>
  40193a:	bf00      	nop
  40193c:	004014c5 	.word	0x004014c5
  401940:	00400e75 	.word	0x00400e75
  401944:	20400450 	.word	0x20400450

00401948 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
  401948:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
  40194a:	4b0f      	ldr	r3, [pc, #60]	; (401988 <usb_d_ep_register_callback+0x40>)
{
  40194c:	4614      	mov	r4, r2
  40194e:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
  401950:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
  401952:	4b0e      	ldr	r3, [pc, #56]	; (40198c <usb_d_ep_register_callback+0x44>)
  401954:	2c00      	cmp	r4, #0
  401956:	bf08      	it	eq
  401958:	461c      	moveq	r4, r3
	if (ep_index < 0) {
  40195a:	2800      	cmp	r0, #0
  40195c:	db08      	blt.n	401970 <usb_d_ep_register_callback+0x28>
		return;
	}
	switch (type) {
  40195e:	2d01      	cmp	r5, #1
  401960:	d007      	beq.n	401972 <usb_d_ep_register_callback+0x2a>
  401962:	2d02      	cmp	r5, #2
  401964:	d00a      	beq.n	40197c <usb_d_ep_register_callback+0x34>
  401966:	b91d      	cbnz	r5, 401970 <usb_d_ep_register_callback+0x28>
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
  401968:	4b09      	ldr	r3, [pc, #36]	; (401990 <usb_d_ep_register_callback+0x48>)
  40196a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  40196e:	6144      	str	r4, [r0, #20]
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
  401970:	bd38      	pop	{r3, r4, r5, pc}
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
  401972:	4b07      	ldr	r3, [pc, #28]	; (401990 <usb_d_ep_register_callback+0x48>)
  401974:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  401978:	6184      	str	r4, [r0, #24]
		break;
  40197a:	e7f9      	b.n	401970 <usb_d_ep_register_callback+0x28>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
  40197c:	4b04      	ldr	r3, [pc, #16]	; (401990 <usb_d_ep_register_callback+0x48>)
  40197e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  401982:	61c4      	str	r4, [r0, #28]
		break;
  401984:	e7f4      	b.n	401970 <usb_d_ep_register_callback+0x28>
  401986:	bf00      	nop
  401988:	004014c5 	.word	0x004014c5
  40198c:	004014f5 	.word	0x004014f5
  401990:	20400450 	.word	0x20400450

00401994 <main>:
#include <atmel_start.h>

int main(void)
{
  401994:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401996:	4b02      	ldr	r3, [pc, #8]	; (4019a0 <main+0xc>)
  401998:	4798      	blx	r3

	cdcd_acm_example();
  40199a:	4b02      	ldr	r3, [pc, #8]	; (4019a4 <main+0x10>)
  40199c:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
  40199e:	e7fe      	b.n	40199e <main+0xa>
  4019a0:	004001a9 	.word	0x004001a9
  4019a4:	004012c1 	.word	0x004012c1

004019a8 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
  4019a8:	4b05      	ldr	r3, [pc, #20]	; (4019c0 <usbdc_unconfig+0x18>)
{
  4019aa:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
  4019ac:	695c      	ldr	r4, [r3, #20]
	while (NULL != func) {
  4019ae:	b904      	cbnz	r4, 4019b2 <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
  4019b0:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
  4019b2:	6863      	ldr	r3, [r4, #4]
  4019b4:	4620      	mov	r0, r4
  4019b6:	2200      	movs	r2, #0
  4019b8:	2101      	movs	r1, #1
  4019ba:	4798      	blx	r3
		func = func->next;
  4019bc:	6824      	ldr	r4, [r4, #0]
  4019be:	e7f6      	b.n	4019ae <usbdc_unconfig+0x6>
  4019c0:	204004d0 	.word	0x204004d0

004019c4 <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
  4019c4:	4b06      	ldr	r3, [pc, #24]	; (4019e0 <usbdc_change_notify+0x1c>)
{
  4019c6:	b570      	push	{r4, r5, r6, lr}
  4019c8:	4605      	mov	r5, r0
  4019ca:	460e      	mov	r6, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
  4019cc:	691c      	ldr	r4, [r3, #16]

	while (cg != NULL) {
  4019ce:	b904      	cbnz	r4, 4019d2 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
  4019d0:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
  4019d2:	6863      	ldr	r3, [r4, #4]
  4019d4:	b113      	cbz	r3, 4019dc <usbdc_change_notify+0x18>
			cg->cb(change, value);
  4019d6:	4631      	mov	r1, r6
  4019d8:	4628      	mov	r0, r5
  4019da:	4798      	blx	r3
		cg = cg->next;
  4019dc:	6824      	ldr	r4, [r4, #0]
  4019de:	e7f6      	b.n	4019ce <usbdc_change_notify+0xa>
  4019e0:	204004d0 	.word	0x204004d0

004019e4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  4019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
  4019e6:	4b0c      	ldr	r3, [pc, #48]	; (401a18 <usbdc_request_handler+0x34>)
{
  4019e8:	4605      	mov	r5, r0
  4019ea:	460e      	mov	r6, r1
  4019ec:	4617      	mov	r7, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
  4019ee:	68dc      	ldr	r4, [r3, #12]
	int32_t                   rc;

	while (h != NULL) {
  4019f0:	b90c      	cbnz	r4, 4019f6 <usbdc_request_handler+0x12>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
  4019f2:	4620      	mov	r0, r4
}
  4019f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
  4019f6:	6863      	ldr	r3, [r4, #4]
  4019f8:	b90b      	cbnz	r3, 4019fe <usbdc_request_handler+0x1a>
		h = h->next;
  4019fa:	6824      	ldr	r4, [r4, #0]
  4019fc:	e7f8      	b.n	4019f0 <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
  4019fe:	463a      	mov	r2, r7
  401a00:	4631      	mov	r1, r6
  401a02:	4628      	mov	r0, r5
  401a04:	4798      	blx	r3
			if (0 == rc) {
  401a06:	b120      	cbz	r0, 401a12 <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
  401a08:	300a      	adds	r0, #10
  401a0a:	d0f6      	beq.n	4019fa <usbdc_request_handler+0x16>
				return -1;
  401a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401a10:	e7f0      	b.n	4019f4 <usbdc_request_handler+0x10>
				return true;
  401a12:	2001      	movs	r0, #1
  401a14:	e7ee      	b.n	4019f4 <usbdc_request_handler+0x10>
  401a16:	bf00      	nop
  401a18:	204004d0 	.word	0x204004d0

00401a1c <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
  401a1c:	4b04      	ldr	r3, [pc, #16]	; (401a30 <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
  401a1e:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
  401a20:	689c      	ldr	r4, [r3, #8]
	while (sof != NULL) {
  401a22:	b904      	cbnz	r4, 401a26 <usbd_sof_cb+0xa>
	usbdc_sof_notify();
}
  401a24:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
  401a26:	6863      	ldr	r3, [r4, #4]
  401a28:	b103      	cbz	r3, 401a2c <usbd_sof_cb+0x10>
			sof->cb();
  401a2a:	4798      	blx	r3
		sof = sof->next;
  401a2c:	6824      	ldr	r4, [r4, #0]
  401a2e:	e7f8      	b.n	401a22 <usbd_sof_cb+0x6>
  401a30:	204004d0 	.word	0x204004d0

00401a34 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
  401a34:	b510      	push	{r4, lr}
  401a36:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
  401a38:	460a      	mov	r2, r1
  401a3a:	b119      	cbz	r1, 401a44 <usbdc_cb_ctl_done+0x10>
  401a3c:	2901      	cmp	r1, #1
  401a3e:	d020      	beq.n	401a82 <usbdc_cb_ctl_done+0x4e>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
  401a40:	2000      	movs	r0, #0
  401a42:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
  401a44:	7823      	ldrb	r3, [r4, #0]
  401a46:	2b00      	cmp	r3, #0
  401a48:	d1fa      	bne.n	401a40 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
  401a4a:	7863      	ldrb	r3, [r4, #1]
  401a4c:	2b05      	cmp	r3, #5
  401a4e:	d00d      	beq.n	401a6c <usbdc_cb_ctl_done+0x38>
  401a50:	2b09      	cmp	r3, #9
  401a52:	d1f5      	bne.n	401a40 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
  401a54:	8862      	ldrh	r2, [r4, #2]
  401a56:	4b0d      	ldr	r3, [pc, #52]	; (401a8c <usbdc_cb_ctl_done+0x58>)
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
  401a58:	2a00      	cmp	r2, #0
		usbdc.cfg_value = req->wValue;
  401a5a:	77da      	strb	r2, [r3, #31]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
  401a5c:	bf14      	ite	ne
  401a5e:	2104      	movne	r1, #4
  401a60:	2103      	moveq	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
  401a62:	7799      	strb	r1, [r3, #30]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
  401a64:	2001      	movs	r0, #1
  401a66:	4b0a      	ldr	r3, [pc, #40]	; (401a90 <usbdc_cb_ctl_done+0x5c>)
  401a68:	4798      	blx	r3
		break;
  401a6a:	e7e9      	b.n	401a40 <usbdc_cb_ctl_done+0xc>
		usbdc_set_address(req->wValue);
  401a6c:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
  401a6e:	4b09      	ldr	r3, [pc, #36]	; (401a94 <usbdc_cb_ctl_done+0x60>)
  401a70:	b2c0      	uxtb	r0, r0
  401a72:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
  401a74:	8863      	ldrh	r3, [r4, #2]
  401a76:	2b00      	cmp	r3, #0
  401a78:	4b04      	ldr	r3, [pc, #16]	; (401a8c <usbdc_cb_ctl_done+0x58>)
  401a7a:	bf14      	ite	ne
  401a7c:	2103      	movne	r1, #3
  401a7e:	2102      	moveq	r1, #2
  401a80:	e7ef      	b.n	401a62 <usbdc_cb_ctl_done+0x2e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
  401a82:	4621      	mov	r1, r4
  401a84:	4b04      	ldr	r3, [pc, #16]	; (401a98 <usbdc_cb_ctl_done+0x64>)
  401a86:	2000      	movs	r0, #0
  401a88:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
  401a8a:	e7d9      	b.n	401a40 <usbdc_cb_ctl_done+0xc>
  401a8c:	204004d0 	.word	0x204004d0
  401a90:	004019c5 	.word	0x004019c5
  401a94:	00401725 	.word	0x00401725
  401a98:	004019e5 	.word	0x004019e5

00401a9c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
  401a9c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();

	usbdc.state       = USBD_S_DEFAULT;
	usbdc.cfg_value   = 0;
	usbdc.ifc_alt_map = 0;
  401a9e:	2400      	movs	r4, #0
	usbdc.state       = USBD_S_DEFAULT;
  401aa0:	4d0d      	ldr	r5, [pc, #52]	; (401ad8 <usbdc_reset+0x3c>)
  401aa2:	2602      	movs	r6, #2
	usbdc_unconfig();
  401aa4:	4b0d      	ldr	r3, [pc, #52]	; (401adc <usbdc_reset+0x40>)
  401aa6:	4798      	blx	r3

	// Setup EP0
	usb_d_ep_deinit(0);
  401aa8:	4620      	mov	r0, r4
	usbdc.state       = USBD_S_DEFAULT;
  401aaa:	83ee      	strh	r6, [r5, #30]
	usb_d_ep_deinit(0);
  401aac:	4b0c      	ldr	r3, [pc, #48]	; (401ae0 <usbdc_reset+0x44>)
	usbdc.ifc_alt_map = 0;
  401aae:	f885 4021 	strb.w	r4, [r5, #33]	; 0x21
	usb_d_ep_deinit(0);
  401ab2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
  401ab4:	4b0b      	ldr	r3, [pc, #44]	; (401ae4 <usbdc_reset+0x48>)
  401ab6:	f895 0020 	ldrb.w	r0, [r5, #32]
  401aba:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
  401abc:	4d0a      	ldr	r5, [pc, #40]	; (401ae8 <usbdc_reset+0x4c>)
  401abe:	4621      	mov	r1, r4
  401ac0:	4620      	mov	r0, r4
  401ac2:	4a0a      	ldr	r2, [pc, #40]	; (401aec <usbdc_reset+0x50>)
  401ac4:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
  401ac6:	4620      	mov	r0, r4
  401ac8:	4631      	mov	r1, r6
  401aca:	4a09      	ldr	r2, [pc, #36]	; (401af0 <usbdc_reset+0x54>)
  401acc:	47a8      	blx	r5
	usb_d_ep_enable(0);
  401ace:	4620      	mov	r0, r4
  401ad0:	4b08      	ldr	r3, [pc, #32]	; (401af4 <usbdc_reset+0x58>)
}
  401ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
  401ad6:	4718      	bx	r3
  401ad8:	204004d0 	.word	0x204004d0
  401adc:	004019a9 	.word	0x004019a9
  401ae0:	00401791 	.word	0x00401791
  401ae4:	00401781 	.word	0x00401781
  401ae8:	00401949 	.word	0x00401949
  401aec:	00401b31 	.word	0x00401b31
  401af0:	00401a35 	.word	0x00401a35
  401af4:	004017bd 	.word	0x004017bd

00401af8 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
  401af8:	b110      	cbz	r0, 401b00 <usbd_event_cb+0x8>
  401afa:	2801      	cmp	r0, #1
  401afc:	d002      	beq.n	401b04 <usbd_event_cb+0xc>
  401afe:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
  401b00:	4b01      	ldr	r3, [pc, #4]	; (401b08 <usbd_event_cb+0x10>)
  401b02:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
  401b04:	4b01      	ldr	r3, [pc, #4]	; (401b0c <usbd_event_cb+0x14>)
  401b06:	4718      	bx	r3
  401b08:	004019c5 	.word	0x004019c5
  401b0c:	00401a9d 	.word	0x00401a9d

00401b10 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
  401b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
  401b12:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
  401b16:	4b05      	ldr	r3, [pc, #20]	; (401b2c <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
  401b18:	f88d 000c 	strb.w	r0, [sp, #12]
	return usb_d_ep_transfer(&xfer);
  401b1c:	a801      	add	r0, sp, #4
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
  401b1e:	e9cd 1201 	strd	r1, r2, [sp, #4]
	return usb_d_ep_transfer(&xfer);
  401b22:	4798      	blx	r3
}
  401b24:	b005      	add	sp, #20
  401b26:	f85d fb04 	ldr.w	pc, [sp], #4
  401b2a:	bf00      	nop
  401b2c:	004017fd 	.word	0x004017fd

00401b30 <usbdc_cb_ctl_req>:
{
  401b30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
  401b34:	4ba7      	ldr	r3, [pc, #668]	; (401dd4 <usbdc_cb_ctl_req+0x2a4>)
  401b36:	2200      	movs	r2, #0
{
  401b38:	4605      	mov	r5, r0
  401b3a:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
  401b3c:	4798      	blx	r3
  401b3e:	1c43      	adds	r3, r0, #1
  401b40:	d008      	beq.n	401b54 <usbdc_cb_ctl_req+0x24>
  401b42:	2801      	cmp	r0, #1
  401b44:	d042      	beq.n	401bcc <usbdc_cb_ctl_req+0x9c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
  401b46:	7823      	ldrb	r3, [r4, #0]
  401b48:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
  401b4c:	d004      	beq.n	401b58 <usbdc_cb_ctl_req+0x28>
  401b4e:	2a80      	cmp	r2, #128	; 0x80
  401b50:	f000 80ec 	beq.w	401d2c <usbdc_cb_ctl_req+0x1fc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  401b54:	2000      	movs	r0, #0
  401b56:	e039      	b.n	401bcc <usbdc_cb_ctl_req+0x9c>
	switch (req->bRequest) {
  401b58:	7862      	ldrb	r2, [r4, #1]
  401b5a:	3a01      	subs	r2, #1
  401b5c:	2a0a      	cmp	r2, #10
  401b5e:	d8f9      	bhi.n	401b54 <usbdc_cb_ctl_req+0x24>
  401b60:	a101      	add	r1, pc, #4	; (adr r1, 401b68 <usbdc_cb_ctl_req+0x38>)
  401b62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  401b66:	bf00      	nop
  401b68:	00401c3b 	.word	0x00401c3b
  401b6c:	00401b55 	.word	0x00401b55
  401b70:	00401c5b 	.word	0x00401c5b
  401b74:	00401b55 	.word	0x00401b55
  401b78:	00401b9f 	.word	0x00401b9f
  401b7c:	00401b55 	.word	0x00401b55
  401b80:	00401b55 	.word	0x00401b55
  401b84:	00401b55 	.word	0x00401b55
  401b88:	00401b95 	.word	0x00401b95
  401b8c:	00401b55 	.word	0x00401b55
  401b90:	00401c79 	.word	0x00401c79
		if (!usbdc_set_config(req->wValue)) {
  401b94:	8862      	ldrh	r2, [r4, #2]
  401b96:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
  401b98:	b95a      	cbnz	r2, 401bb2 <usbdc_cb_ctl_req+0x82>
		usbdc_unconfig();
  401b9a:	4b8f      	ldr	r3, [pc, #572]	; (401dd8 <usbdc_cb_ctl_req+0x2a8>)
  401b9c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
  401b9e:	2200      	movs	r2, #0
  401ba0:	2301      	movs	r3, #1
  401ba2:	4611      	mov	r1, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
  401ba4:	4628      	mov	r0, r5
  401ba6:	4c8d      	ldr	r4, [pc, #564]	; (401ddc <usbdc_cb_ctl_req+0x2ac>)
  401ba8:	47a0      	blx	r4
  401baa:	fab0 f080 	clz	r0, r0
  401bae:	0940      	lsrs	r0, r0, #5
  401bb0:	e00c      	b.n	401bcc <usbdc_cb_ctl_req+0x9c>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401bb2:	4b8b      	ldr	r3, [pc, #556]	; (401de0 <usbdc_cb_ctl_req+0x2b0>)
  401bb4:	9201      	str	r2, [sp, #4]
  401bb6:	4798      	blx	r3
  401bb8:	2802      	cmp	r0, #2
  401bba:	4c8a      	ldr	r4, [pc, #552]	; (401de4 <usbdc_cb_ctl_req+0x2b4>)
  401bbc:	4e8a      	ldr	r6, [pc, #552]	; (401de8 <usbdc_cb_ctl_req+0x2b8>)
  401bbe:	9a01      	ldr	r2, [sp, #4]
  401bc0:	d007      	beq.n	401bd2 <usbdc_cb_ctl_req+0xa2>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
  401bc2:	6823      	ldr	r3, [r4, #0]
  401bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
  401bc8:	47b0      	blx	r6
	if (NULL == cfg_desc) {
  401bca:	b960      	cbnz	r0, 401be6 <usbdc_cb_ctl_req+0xb6>
}
  401bcc:	b004      	add	sp, #16
  401bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401bd2:	6863      	ldr	r3, [r4, #4]
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d0f4      	beq.n	401bc2 <usbdc_cb_ctl_req+0x92>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
  401bd8:	9201      	str	r2, [sp, #4]
  401bda:	e9d3 0100 	ldrd	r0, r1, [r3]
  401bde:	47b0      	blx	r6
	if (!cfg_desc) {
  401be0:	9a01      	ldr	r2, [sp, #4]
  401be2:	2800      	cmp	r0, #0
  401be4:	d0ed      	beq.n	401bc2 <usbdc_cb_ctl_req+0x92>
	return (ptr[0] + (ptr[1] << 8));
  401be6:	78c3      	ldrb	r3, [r0, #3]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
  401be8:	2204      	movs	r2, #4
  401bea:	7881      	ldrb	r1, [r0, #2]
  401bec:	4f7f      	ldr	r7, [pc, #508]	; (401dec <usbdc_cb_ctl_req+0x2bc>)
  401bee:	eb01 2103 	add.w	r1, r1, r3, lsl #8
	desc.eod  = cfg_desc + total_len;
  401bf2:	fa10 f181 	uxtah	r1, r0, r1
  401bf6:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
  401bf8:	47b8      	blx	r7
	uint8_t                 last_iface = 0xFF;
  401bfa:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
  401bfc:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
  401bfe:	9a02      	ldr	r2, [sp, #8]
  401c00:	2a00      	cmp	r2, #0
  401c02:	d0cc      	beq.n	401b9e <usbdc_cb_ctl_req+0x6e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
  401c04:	f892 8002 	ldrb.w	r8, [r2, #2]
  401c08:	4598      	cmp	r8, r3
  401c0a:	d014      	beq.n	401c36 <usbdc_cb_ctl_req+0x106>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
  401c0c:	6966      	ldr	r6, [r4, #20]
			while (NULL != func) {
  401c0e:	b94e      	cbnz	r6, 401c24 <usbdc_cb_ctl_req+0xf4>
		desc.sod = usb_desc_next(desc.sod);
  401c10:	9802      	ldr	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  401c12:	2204      	movs	r2, #4
  401c14:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
  401c16:	7803      	ldrb	r3, [r0, #0]
  401c18:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
  401c1a:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  401c1c:	47b8      	blx	r7
  401c1e:	4643      	mov	r3, r8
  401c20:	9002      	str	r0, [sp, #8]
  401c22:	e7ec      	b.n	401bfe <usbdc_cb_ctl_req+0xce>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
  401c24:	6873      	ldr	r3, [r6, #4]
  401c26:	aa02      	add	r2, sp, #8
  401c28:	2100      	movs	r1, #0
  401c2a:	4630      	mov	r0, r6
  401c2c:	4798      	blx	r3
  401c2e:	2800      	cmp	r0, #0
  401c30:	d0ee      	beq.n	401c10 <usbdc_cb_ctl_req+0xe0>
					func = func->next;
  401c32:	6836      	ldr	r6, [r6, #0]
  401c34:	e7eb      	b.n	401c0e <usbdc_cb_ctl_req+0xde>
  401c36:	4698      	mov	r8, r3
  401c38:	e7ea      	b.n	401c10 <usbdc_cb_ctl_req+0xe0>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  401c3a:	2b02      	cmp	r3, #2
  401c3c:	d18a      	bne.n	401b54 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
  401c3e:	88e2      	ldrh	r2, [r4, #6]
  401c40:	2a00      	cmp	r2, #0
  401c42:	d187      	bne.n	401b54 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
  401c44:	88a0      	ldrh	r0, [r4, #4]
  401c46:	4611      	mov	r1, r2
  401c48:	4b69      	ldr	r3, [pc, #420]	; (401df0 <usbdc_cb_ctl_req+0x2c0>)
  401c4a:	b2c0      	uxtb	r0, r0
  401c4c:	9201      	str	r2, [sp, #4]
  401c4e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
  401c50:	2301      	movs	r3, #1
  401c52:	9a01      	ldr	r2, [sp, #4]
		usbdc_xfer(ep, NULL, 0, true);
  401c54:	4611      	mov	r1, r2
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
  401c56:	4628      	mov	r0, r5
  401c58:	e064      	b.n	401d24 <usbdc_cb_ctl_req+0x1f4>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  401c5a:	2b02      	cmp	r3, #2
  401c5c:	f47f af7a 	bne.w	401b54 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
  401c60:	88e6      	ldrh	r6, [r4, #6]
  401c62:	2e00      	cmp	r6, #0
  401c64:	f47f af76 	bne.w	401b54 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
  401c68:	88a0      	ldrh	r0, [r4, #4]
  401c6a:	2101      	movs	r1, #1
  401c6c:	4b60      	ldr	r3, [pc, #384]	; (401df0 <usbdc_cb_ctl_req+0x2c0>)
  401c6e:	b2c0      	uxtb	r0, r0
  401c70:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
  401c72:	2301      	movs	r3, #1
  401c74:	4632      	mov	r2, r6
  401c76:	e7ed      	b.n	401c54 <usbdc_cb_ctl_req+0x124>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401c78:	4b59      	ldr	r3, [pc, #356]	; (401de0 <usbdc_cb_ctl_req+0x2b0>)
		return usbdc_set_interface(req->wValue, req->wIndex);
  401c7a:	8865      	ldrh	r5, [r4, #2]
  401c7c:	88a6      	ldrh	r6, [r4, #4]
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401c7e:	4798      	blx	r3
  401c80:	2802      	cmp	r0, #2
  401c82:	4c58      	ldr	r4, [pc, #352]	; (401de4 <usbdc_cb_ctl_req+0x2b4>)
  401c84:	4f58      	ldr	r7, [pc, #352]	; (401de8 <usbdc_cb_ctl_req+0x2b8>)
  401c86:	d029      	beq.n	401cdc <usbdc_cb_ctl_req+0x1ac>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
  401c88:	6823      	ldr	r3, [r4, #0]
  401c8a:	7fe2      	ldrb	r2, [r4, #31]
  401c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
  401c90:	47b8      	blx	r7
	if (NULL == ifc) {
  401c92:	2800      	cmp	r0, #0
  401c94:	f43f af5e 	beq.w	401b54 <usbdc_cb_ctl_req+0x24>
	desc.sod = ifc;
  401c98:	9002      	str	r0, [sp, #8]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
  401c9a:	2204      	movs	r2, #4
	return (ptr[0] + (ptr[1] << 8));
  401c9c:	78c3      	ldrb	r3, [r0, #3]
  401c9e:	7881      	ldrb	r1, [r0, #2]
  401ca0:	4f52      	ldr	r7, [pc, #328]	; (401dec <usbdc_cb_ctl_req+0x2bc>)
  401ca2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
  401ca6:	fa10 f181 	uxtah	r1, r0, r1
  401caa:	9103      	str	r1, [sp, #12]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  401cac:	47b8      	blx	r7
		if (NULL == ifc) {
  401cae:	2800      	cmp	r0, #0
  401cb0:	f43f af50 	beq.w	401b54 <usbdc_cb_ctl_req+0x24>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
  401cb4:	7883      	ldrb	r3, [r0, #2]
  401cb6:	42b3      	cmp	r3, r6
  401cb8:	d11a      	bne.n	401cf0 <usbdc_cb_ctl_req+0x1c0>
  401cba:	78c3      	ldrb	r3, [r0, #3]
  401cbc:	42ab      	cmp	r3, r5
  401cbe:	d117      	bne.n	401cf0 <usbdc_cb_ctl_req+0x1c0>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
  401cc0:	6967      	ldr	r7, [r4, #20]
	desc.sod = ifc;
  401cc2:	9002      	str	r0, [sp, #8]
	while (NULL != func) {
  401cc4:	2f00      	cmp	r7, #0
  401cc6:	f43f af45 	beq.w	401b54 <usbdc_cb_ctl_req+0x24>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
  401cca:	2101      	movs	r1, #1
  401ccc:	687b      	ldr	r3, [r7, #4]
  401cce:	aa02      	add	r2, sp, #8
  401cd0:	4638      	mov	r0, r7
  401cd2:	4798      	blx	r3
  401cd4:	4601      	mov	r1, r0
  401cd6:	b190      	cbz	r0, 401cfe <usbdc_cb_ctl_req+0x1ce>
			func = func->next;
  401cd8:	683f      	ldr	r7, [r7, #0]
  401cda:	e7f3      	b.n	401cc4 <usbdc_cb_ctl_req+0x194>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401cdc:	6863      	ldr	r3, [r4, #4]
  401cde:	2b00      	cmp	r3, #0
  401ce0:	d0d2      	beq.n	401c88 <usbdc_cb_ctl_req+0x158>
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
  401ce2:	7fe2      	ldrb	r2, [r4, #31]
  401ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
  401ce8:	47b8      	blx	r7
	if (!ifc) {
  401cea:	2800      	cmp	r0, #0
  401cec:	d1d4      	bne.n	401c98 <usbdc_cb_ctl_req+0x168>
  401cee:	e7cb      	b.n	401c88 <usbdc_cb_ctl_req+0x158>
		desc.sod = usb_desc_next(desc.sod);
  401cf0:	9802      	ldr	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  401cf2:	2204      	movs	r2, #4
  401cf4:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
  401cf6:	7803      	ldrb	r3, [r0, #0]
  401cf8:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
  401cfa:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  401cfc:	e7d6      	b.n	401cac <usbdc_cb_ctl_req+0x17c>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
  401cfe:	687b      	ldr	r3, [r7, #4]
  401d00:	aa02      	add	r2, sp, #8
  401d02:	4638      	mov	r0, r7
  401d04:	4798      	blx	r3
  401d06:	2800      	cmp	r0, #0
  401d08:	f47f af24 	bne.w	401b54 <usbdc_cb_ctl_req+0x24>
			if (alt_set) {
  401d0c:	b135      	cbz	r5, 401d1c <usbdc_cb_ctl_req+0x1ec>
				usbdc.ifc_alt_map |= 1 << ifc_id;
  401d0e:	2301      	movs	r3, #1
  401d10:	40b3      	lsls	r3, r6
  401d12:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
  401d16:	431e      	orrs	r6, r3
  401d18:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
			usbdc_xfer(0, NULL, 0, 0);
  401d1c:	2300      	movs	r3, #0
  401d1e:	461a      	mov	r2, r3
  401d20:	4619      	mov	r1, r3
  401d22:	4618      	mov	r0, r3
  401d24:	4c2d      	ldr	r4, [pc, #180]	; (401ddc <usbdc_cb_ctl_req+0x2ac>)
  401d26:	47a0      	blx	r4
			return true;
  401d28:	2001      	movs	r0, #1
  401d2a:	e74f      	b.n	401bcc <usbdc_cb_ctl_req+0x9c>
	switch (req->bRequest) {
  401d2c:	7862      	ldrb	r2, [r4, #1]
  401d2e:	2a0a      	cmp	r2, #10
  401d30:	f63f af10 	bhi.w	401b54 <usbdc_cb_ctl_req+0x24>
  401d34:	a101      	add	r1, pc, #4	; (adr r1, 401d3c <usbdc_cb_ctl_req+0x20c>)
  401d36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  401d3a:	bf00      	nop
  401d3c:	00401edf 	.word	0x00401edf
  401d40:	00401b55 	.word	0x00401b55
  401d44:	00401b55 	.word	0x00401b55
  401d48:	00401b55 	.word	0x00401b55
  401d4c:	00401b55 	.word	0x00401b55
  401d50:	00401b55 	.word	0x00401b55
  401d54:	00401d69 	.word	0x00401d69
  401d58:	00401b55 	.word	0x00401b55
  401d5c:	00401ecf 	.word	0x00401ecf
  401d60:	00401b55 	.word	0x00401b55
  401d64:	00401f0d 	.word	0x00401f0d
	uint8_t type = (uint8_t)(req->wValue >> 8);
  401d68:	8866      	ldrh	r6, [r4, #2]
	switch (type) {
  401d6a:	0a33      	lsrs	r3, r6, #8
  401d6c:	3b01      	subs	r3, #1
  401d6e:	2b06      	cmp	r3, #6
  401d70:	f63f aef0 	bhi.w	401b54 <usbdc_cb_ctl_req+0x24>
  401d74:	a201      	add	r2, pc, #4	; (adr r2, 401d7c <usbdc_cb_ctl_req+0x24c>)
  401d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d7a:	bf00      	nop
  401d7c:	00401d99 	.word	0x00401d99
  401d80:	00401df5 	.word	0x00401df5
  401d84:	00401e99 	.word	0x00401e99
  401d88:	00401b55 	.word	0x00401b55
  401d8c:	00401b55 	.word	0x00401b55
  401d90:	00401e41 	.word	0x00401e41
  401d94:	00401e69 	.word	0x00401e69
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401d98:	4b11      	ldr	r3, [pc, #68]	; (401de0 <usbdc_cb_ctl_req+0x2b0>)
	uint16_t length   = req->wLength;
  401d9a:	88e7      	ldrh	r7, [r4, #6]
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401d9c:	4798      	blx	r3
  401d9e:	2802      	cmp	r0, #2
  401da0:	4e10      	ldr	r6, [pc, #64]	; (401de4 <usbdc_cb_ctl_req+0x2b4>)
  401da2:	4c12      	ldr	r4, [pc, #72]	; (401dec <usbdc_cb_ctl_req+0x2bc>)
  401da4:	d006      	beq.n	401db4 <usbdc_cb_ctl_req+0x284>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
  401da6:	6833      	ldr	r3, [r6, #0]
  401da8:	2201      	movs	r2, #1
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE_QUALIFIER);
  401daa:	e9d3 0100 	ldrd	r0, r1, [r3]
  401dae:	47a0      	blx	r4
	if (!dev_desc) {
  401db0:	b948      	cbnz	r0, 401dc6 <usbdc_cb_ctl_req+0x296>
  401db2:	e6cf      	b.n	401b54 <usbdc_cb_ctl_req+0x24>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401db4:	6873      	ldr	r3, [r6, #4]
  401db6:	2b00      	cmp	r3, #0
  401db8:	d0f5      	beq.n	401da6 <usbdc_cb_ctl_req+0x276>
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
  401dba:	2201      	movs	r2, #1
  401dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
  401dc0:	47a0      	blx	r4
	if (!dev_desc) {
  401dc2:	2800      	cmp	r0, #0
  401dc4:	d0ef      	beq.n	401da6 <usbdc_cb_ctl_req+0x276>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
  401dc6:	2f12      	cmp	r7, #18
  401dc8:	463a      	mov	r2, r7
  401dca:	f04f 0300 	mov.w	r3, #0
  401dce:	bf28      	it	cs
  401dd0:	2212      	movcs	r2, #18
  401dd2:	e033      	b.n	401e3c <usbdc_cb_ctl_req+0x30c>
  401dd4:	004019e5 	.word	0x004019e5
  401dd8:	004019a9 	.word	0x004019a9
  401ddc:	00401b11 	.word	0x00401b11
  401de0:	0040171d 	.word	0x0040171d
  401de4:	204004d0 	.word	0x204004d0
  401de8:	00401421 	.word	0x00401421
  401dec:	004013e9 	.word	0x004013e9
  401df0:	004018e5 	.word	0x004018e5
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401df4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 401f58 <usbdc_cb_ctl_req+0x428>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401df8:	4b55      	ldr	r3, [pc, #340]	; (401f50 <usbdc_cb_ctl_req+0x420>)
	uint16_t length   = req->wLength;
  401dfa:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401dfc:	f898 7020 	ldrb.w	r7, [r8, #32]
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401e00:	4798      	blx	r3
  401e02:	1c72      	adds	r2, r6, #1
  401e04:	2802      	cmp	r0, #2
  401e06:	4e53      	ldr	r6, [pc, #332]	; (401f54 <usbdc_cb_ctl_req+0x424>)
  401e08:	b2d2      	uxtb	r2, r2
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401e0a:	d039      	beq.n	401e80 <usbdc_cb_ctl_req+0x350>
		cfg_desc = usb_find_othspdcfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
  401e0c:	f8d8 3000 	ldr.w	r3, [r8]
  401e10:	e9d3 0100 	ldrd	r0, r1, [r3]
  401e14:	47b0      	blx	r6
	if (NULL == cfg_desc) {
  401e16:	2800      	cmp	r0, #0
  401e18:	f43f ae9c 	beq.w	401b54 <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
  401e1c:	78c3      	ldrb	r3, [r0, #3]
  401e1e:	7882      	ldrb	r2, [r0, #2]
  401e20:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  401e24:	b292      	uxth	r2, r2
	if (length <= total_len) {
  401e26:	4294      	cmp	r4, r2
  401e28:	d906      	bls.n	401e38 <usbdc_cb_ctl_req+0x308>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401e2a:	3f01      	subs	r7, #1
  401e2c:	4227      	tst	r7, r4
  401e2e:	4614      	mov	r4, r2
  401e30:	bf0c      	ite	eq
  401e32:	2301      	moveq	r3, #1
  401e34:	2300      	movne	r3, #0
  401e36:	e000      	b.n	401e3a <usbdc_cb_ctl_req+0x30a>
		need_zlp = false;
  401e38:	2300      	movs	r3, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
  401e3a:	4622      	mov	r2, r4
  401e3c:	4601      	mov	r1, r0
  401e3e:	e6b1      	b.n	401ba4 <usbdc_cb_ctl_req+0x74>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401e40:	4b43      	ldr	r3, [pc, #268]	; (401f50 <usbdc_cb_ctl_req+0x420>)
	uint16_t length   = req->wLength;
  401e42:	88e7      	ldrh	r7, [r4, #6]
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401e44:	4798      	blx	r3
  401e46:	2802      	cmp	r0, #2
  401e48:	4e43      	ldr	r6, [pc, #268]	; (401f58 <usbdc_cb_ctl_req+0x428>)
  401e4a:	4c44      	ldr	r4, [pc, #272]	; (401f5c <usbdc_cb_ctl_req+0x42c>)
  401e4c:	d002      	beq.n	401e54 <usbdc_cb_ctl_req+0x324>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE_QUALIFIER);
  401e4e:	6833      	ldr	r3, [r6, #0]
  401e50:	2206      	movs	r2, #6
  401e52:	e7aa      	b.n	401daa <usbdc_cb_ctl_req+0x27a>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401e54:	6873      	ldr	r3, [r6, #4]
  401e56:	2b00      	cmp	r3, #0
  401e58:	d0f9      	beq.n	401e4e <usbdc_cb_ctl_req+0x31e>
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE_QUALIFIER);
  401e5a:	2206      	movs	r2, #6
  401e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
  401e60:	47a0      	blx	r4
	if (!dev_desc) {
  401e62:	2800      	cmp	r0, #0
  401e64:	d1af      	bne.n	401dc6 <usbdc_cb_ctl_req+0x296>
  401e66:	e7f2      	b.n	401e4e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401e68:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 401f58 <usbdc_cb_ctl_req+0x428>
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401e6c:	4b38      	ldr	r3, [pc, #224]	; (401f50 <usbdc_cb_ctl_req+0x420>)
	uint16_t length   = req->wLength;
  401e6e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401e70:	f898 7020 	ldrb.w	r7, [r8, #32]
	if (usb_d_get_speed() == USB_SPEED_HS && usbdc.desces.hs) {
  401e74:	4798      	blx	r3
  401e76:	1c72      	adds	r2, r6, #1
  401e78:	2802      	cmp	r0, #2
  401e7a:	4e39      	ldr	r6, [pc, #228]	; (401f60 <usbdc_cb_ctl_req+0x430>)
  401e7c:	b2d2      	uxtb	r2, r2
  401e7e:	e7c4      	b.n	401e0a <usbdc_cb_ctl_req+0x2da>
  401e80:	f8d8 3004 	ldr.w	r3, [r8, #4]
  401e84:	2b00      	cmp	r3, #0
  401e86:	d0c1      	beq.n	401e0c <usbdc_cb_ctl_req+0x2dc>
		cfg_desc = usb_find_othspdcfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
  401e88:	9201      	str	r2, [sp, #4]
  401e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
  401e8e:	47b0      	blx	r6
	if (!cfg_desc) {
  401e90:	9a01      	ldr	r2, [sp, #4]
  401e92:	2800      	cmp	r0, #0
  401e94:	d1c2      	bne.n	401e1c <usbdc_cb_ctl_req+0x2ec>
  401e96:	e7b9      	b.n	401e0c <usbdc_cb_ctl_req+0x2dc>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401e98:	4a2f      	ldr	r2, [pc, #188]	; (401f58 <usbdc_cb_ctl_req+0x428>)
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
  401e9a:	4b32      	ldr	r3, [pc, #200]	; (401f64 <usbdc_cb_ctl_req+0x434>)
  401e9c:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401e9e:	f892 7020 	ldrb.w	r7, [r2, #32]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
  401ea2:	b2f2      	uxtb	r2, r6
	uint16_t length   = req->wLength;
  401ea4:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
  401ea6:	e9d0 0100 	ldrd	r0, r1, [r0]
  401eaa:	4798      	blx	r3
	if (NULL == str_desc) {
  401eac:	4601      	mov	r1, r0
  401eae:	2800      	cmp	r0, #0
  401eb0:	f43f ae50 	beq.w	401b54 <usbdc_cb_ctl_req+0x24>
	if (length <= str_desc[0]) {
  401eb4:	7802      	ldrb	r2, [r0, #0]
  401eb6:	4294      	cmp	r4, r2
  401eb8:	d907      	bls.n	401eca <usbdc_cb_ctl_req+0x39a>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  401eba:	1e7b      	subs	r3, r7, #1
  401ebc:	4223      	tst	r3, r4
  401ebe:	4614      	mov	r4, r2
  401ec0:	bf0c      	ite	eq
  401ec2:	2301      	moveq	r3, #1
  401ec4:	2300      	movne	r3, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
  401ec6:	4622      	mov	r2, r4
  401ec8:	e66c      	b.n	401ba4 <usbdc_cb_ctl_req+0x74>
		need_zlp = false;
  401eca:	2300      	movs	r3, #0
  401ecc:	e7fb      	b.n	401ec6 <usbdc_cb_ctl_req+0x396>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
  401ece:	4922      	ldr	r1, [pc, #136]	; (401f58 <usbdc_cb_ctl_req+0x428>)
  401ed0:	698b      	ldr	r3, [r1, #24]
  401ed2:	7fca      	ldrb	r2, [r1, #31]
  401ed4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
  401ed6:	2300      	movs	r3, #0
  401ed8:	2201      	movs	r2, #1
  401eda:	6989      	ldr	r1, [r1, #24]
  401edc:	e6bb      	b.n	401c56 <usbdc_cb_ctl_req+0x126>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  401ede:	f003 011f 	and.w	r1, r3, #31
  401ee2:	f013 031e 	ands.w	r3, r3, #30
  401ee6:	d00b      	beq.n	401f00 <usbdc_cb_ctl_req+0x3d0>
  401ee8:	2902      	cmp	r1, #2
  401eea:	f47f ae33 	bne.w	401b54 <usbdc_cb_ctl_req+0x24>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
  401eee:	88a0      	ldrh	r0, [r4, #4]
  401ef0:	4b1d      	ldr	r3, [pc, #116]	; (401f68 <usbdc_cb_ctl_req+0x438>)
  401ef2:	b2c0      	uxtb	r0, r0
  401ef4:	4798      	blx	r3
		if (st < 0) {
  401ef6:	1e03      	subs	r3, r0, #0
  401ef8:	f6ff ae2c 	blt.w	401b54 <usbdc_cb_ctl_req+0x24>
		st = st & 0x1;
  401efc:	f003 0301 	and.w	r3, r3, #1
	memcpy(usbdc.ctrl_buf, &st, 2);
  401f00:	4915      	ldr	r1, [pc, #84]	; (401f58 <usbdc_cb_ctl_req+0x428>)
  401f02:	698a      	ldr	r2, [r1, #24]
  401f04:	8013      	strh	r3, [r2, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
  401f06:	2300      	movs	r3, #0
  401f08:	2202      	movs	r2, #2
  401f0a:	e7e6      	b.n	401eda <usbdc_cb_ctl_req+0x3aa>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
  401f0c:	4912      	ldr	r1, [pc, #72]	; (401f58 <usbdc_cb_ctl_req+0x428>)
  401f0e:	88a2      	ldrh	r2, [r4, #4]
  401f10:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
  401f14:	460e      	mov	r6, r1
  401f16:	4113      	asrs	r3, r2
  401f18:	f013 0301 	ands.w	r3, r3, #1
  401f1c:	d00c      	beq.n	401f38 <usbdc_cb_ctl_req+0x408>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
  401f1e:	694d      	ldr	r5, [r1, #20]
	while (NULL != func) {
  401f20:	2d00      	cmp	r5, #0
  401f22:	f43f ae17 	beq.w	401b54 <usbdc_cb_ctl_req+0x24>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
  401f26:	686b      	ldr	r3, [r5, #4]
  401f28:	4622      	mov	r2, r4
  401f2a:	2102      	movs	r1, #2
  401f2c:	4628      	mov	r0, r5
  401f2e:	4798      	blx	r3
  401f30:	2800      	cmp	r0, #0
  401f32:	da06      	bge.n	401f42 <usbdc_cb_ctl_req+0x412>
			func = func->next;
  401f34:	682d      	ldr	r5, [r5, #0]
  401f36:	e7f3      	b.n	401f20 <usbdc_cb_ctl_req+0x3f0>
		usbdc.ctrl_buf[0] = 0;
  401f38:	698a      	ldr	r2, [r1, #24]
  401f3a:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
  401f3c:	2201      	movs	r2, #1
  401f3e:	6989      	ldr	r1, [r1, #24]
  401f40:	e6ef      	b.n	401d22 <usbdc_cb_ctl_req+0x1f2>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
  401f42:	69b3      	ldr	r3, [r6, #24]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
  401f44:	2201      	movs	r2, #1
			usbdc.ctrl_buf[0] = (uint8_t)rc;
  401f46:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
  401f48:	2300      	movs	r3, #0
  401f4a:	69b1      	ldr	r1, [r6, #24]
  401f4c:	e6e9      	b.n	401d22 <usbdc_cb_ctl_req+0x1f2>
  401f4e:	bf00      	nop
  401f50:	0040171d 	.word	0x0040171d
  401f54:	00401421 	.word	0x00401421
  401f58:	204004d0 	.word	0x204004d0
  401f5c:	004013e9 	.word	0x004013e9
  401f60:	0040145d 	.word	0x0040145d
  401f64:	00401499 	.word	0x00401499
  401f68:	004018e5 	.word	0x004018e5

00401f6c <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
  401f6c:	2801      	cmp	r0, #1
  401f6e:	d005      	beq.n	401f7c <usbdc_register_handler+0x10>
  401f70:	2802      	cmp	r0, #2
  401f72:	d005      	beq.n	401f80 <usbdc_register_handler+0x14>
  401f74:	b930      	cbnz	r0, 401f84 <usbdc_register_handler+0x18>
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
  401f76:	4804      	ldr	r0, [pc, #16]	; (401f88 <usbdc_register_handler+0x1c>)
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
  401f78:	4b04      	ldr	r3, [pc, #16]	; (401f8c <usbdc_register_handler+0x20>)
  401f7a:	4718      	bx	r3
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
  401f7c:	4804      	ldr	r0, [pc, #16]	; (401f90 <usbdc_register_handler+0x24>)
  401f7e:	e7fb      	b.n	401f78 <usbdc_register_handler+0xc>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
  401f80:	4804      	ldr	r0, [pc, #16]	; (401f94 <usbdc_register_handler+0x28>)
  401f82:	e7f9      	b.n	401f78 <usbdc_register_handler+0xc>
		break;
	default:
		break;
	}
}
  401f84:	4770      	bx	lr
  401f86:	bf00      	nop
  401f88:	204004d8 	.word	0x204004d8
  401f8c:	004011d9 	.word	0x004011d9
  401f90:	204004dc 	.word	0x204004dc
  401f94:	204004e0 	.word	0x204004e0

00401f98 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
  401f98:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
  401f9a:	4604      	mov	r4, r0
  401f9c:	3800      	subs	r0, #0
  401f9e:	f240 3255 	movw	r2, #853	; 0x355
  401fa2:	490c      	ldr	r1, [pc, #48]	; (401fd4 <usbdc_init+0x3c>)
  401fa4:	bf18      	it	ne
  401fa6:	2001      	movne	r0, #1
  401fa8:	4b0b      	ldr	r3, [pc, #44]	; (401fd8 <usbdc_init+0x40>)
  401faa:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
  401fac:	4b0b      	ldr	r3, [pc, #44]	; (401fdc <usbdc_init+0x44>)
  401fae:	4798      	blx	r3
	if (rc < 0) {
  401fb0:	2800      	cmp	r0, #0
  401fb2:	db0e      	blt.n	401fd2 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
  401fb4:	4b0a      	ldr	r3, [pc, #40]	; (401fe0 <usbdc_init+0x48>)
  401fb6:	2224      	movs	r2, #36	; 0x24
  401fb8:	2100      	movs	r1, #0
  401fba:	4d0a      	ldr	r5, [pc, #40]	; (401fe4 <usbdc_init+0x4c>)
  401fbc:	4618      	mov	r0, r3
  401fbe:	47a8      	blx	r5
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
  401fc0:	4909      	ldr	r1, [pc, #36]	; (401fe8 <usbdc_init+0x50>)
	usbdc.ctrl_buf = ctrl_buf;
  401fc2:	6184      	str	r4, [r0, #24]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
  401fc4:	2000      	movs	r0, #0
  401fc6:	4c09      	ldr	r4, [pc, #36]	; (401fec <usbdc_init+0x54>)
  401fc8:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
  401fca:	2001      	movs	r0, #1
  401fcc:	4908      	ldr	r1, [pc, #32]	; (401ff0 <usbdc_init+0x58>)
  401fce:	47a0      	blx	r4

	return 0;
  401fd0:	2000      	movs	r0, #0
}
  401fd2:	bd38      	pop	{r3, r4, r5, pc}
  401fd4:	00402191 	.word	0x00402191
  401fd8:	00401219 	.word	0x00401219
  401fdc:	0040169d 	.word	0x0040169d
  401fe0:	204004d0 	.word	0x204004d0
  401fe4:	0040213d 	.word	0x0040213d
  401fe8:	00401a1d 	.word	0x00401a1d
  401fec:	00401705 	.word	0x00401705
  401ff0:	00401af9 	.word	0x00401af9

00401ff4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
  401ff4:	4601      	mov	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
  401ff6:	4b01      	ldr	r3, [pc, #4]	; (401ffc <usbdc_register_function+0x8>)
  401ff8:	4801      	ldr	r0, [pc, #4]	; (402000 <usbdc_register_function+0xc>)
  401ffa:	4718      	bx	r3
  401ffc:	004011d9 	.word	0x004011d9
  402000:	204004e4 	.word	0x204004e4

00402004 <usbdc_start>:
/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
	if (usbdc.state >= USBD_S_POWER) {
  402004:	4b0c      	ldr	r3, [pc, #48]	; (402038 <usbdc_start+0x34>)
{
  402006:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
  402008:	7f9c      	ldrb	r4, [r3, #30]
  40200a:	b974      	cbnz	r4, 40202a <usbdc_start+0x26>
		return ERR_BUSY;
	}

	if (desces) {
  40200c:	b180      	cbz	r0, 402030 <usbdc_start+0x2c>
		usbdc.desces.ls_fs = desces;
#if CONF_USBD_HS_SP
		usbdc.desces.hs = &desces[1];
  40200e:	f100 0208 	add.w	r2, r0, #8
		usbdc.desces.ls_fs = desces;
  402012:	6018      	str	r0, [r3, #0]
		usbdc.desces.hs = &desces[1];
  402014:	605a      	str	r2, [r3, #4]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
  402016:	6802      	ldr	r2, [r0, #0]
  402018:	79d2      	ldrb	r2, [r2, #7]
  40201a:	f883 2020 	strb.w	r2, [r3, #32]
	usbdc.state     = USBD_S_POWER;
  40201e:	2201      	movs	r2, #1
  402020:	779a      	strb	r2, [r3, #30]
	usb_d_enable();
  402022:	4b06      	ldr	r3, [pc, #24]	; (40203c <usbdc_start+0x38>)
  402024:	4798      	blx	r3
	return ERR_NONE;
  402026:	4620      	mov	r0, r4
}
  402028:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
  40202a:	f06f 0003 	mvn.w	r0, #3
  40202e:	e7fb      	b.n	402028 <usbdc_start+0x24>
		return ERR_BAD_DATA;
  402030:	f06f 0008 	mvn.w	r0, #8
  402034:	e7f8      	b.n	402028 <usbdc_start+0x24>
  402036:	bf00      	nop
  402038:	204004d0 	.word	0x204004d0
  40203c:	0040170d 	.word	0x0040170d

00402040 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
  402040:	4b00      	ldr	r3, [pc, #0]	; (402044 <usbdc_attach+0x4>)
  402042:	4718      	bx	r3
  402044:	00401715 	.word	0x00401715

00402048 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
  402048:	4b01      	ldr	r3, [pc, #4]	; (402050 <usbdc_get_ctrl_buffer+0x8>)
  40204a:	6998      	ldr	r0, [r3, #24]
  40204c:	4770      	bx	lr
  40204e:	bf00      	nop
  402050:	204004d0 	.word	0x204004d0

00402054 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
  402054:	4b03      	ldr	r3, [pc, #12]	; (402064 <usbdc_get_state+0x10>)
  402056:	7f98      	ldrb	r0, [r3, #30]
  402058:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
  40205c:	bf18      	it	ne
  40205e:	2010      	movne	r0, #16
  402060:	4770      	bx	lr
  402062:	bf00      	nop
  402064:	204004d0 	.word	0x204004d0

00402068 <USB_DEVICE_INSTANCE_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  402068:	4b04      	ldr	r3, [pc, #16]	; (40207c <USB_DEVICE_INSTANCE_CLOCK_init+0x14>)
  40206a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40206e:	0752      	lsls	r2, r2, #29
  402070:	d402      	bmi.n	402078 <USB_DEVICE_INSTANCE_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER1 = mask;
  402072:	2204      	movs	r2, #4
  402074:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

void USB_DEVICE_INSTANCE_CLOCK_init(void)
{
	_pmc_enable_periph_clock(ID_USBHS);
}
  402078:	4770      	bx	lr
  40207a:	bf00      	nop
  40207c:	400e0600 	.word	0x400e0600

00402080 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
	USB_DEVICE_INSTANCE_CLOCK_init();
  402080:	4b03      	ldr	r3, [pc, #12]	; (402090 <USB_DEVICE_INSTANCE_init+0x10>)
{
  402082:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
  402084:	4798      	blx	r3
	usb_d_init();
  402086:	4b03      	ldr	r3, [pc, #12]	; (402094 <USB_DEVICE_INSTANCE_init+0x14>)
}
  402088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usb_d_init();
  40208c:	4718      	bx	r3
  40208e:	bf00      	nop
  402090:	00402069 	.word	0x00402069
  402094:	0040169d 	.word	0x0040169d

00402098 <system_init>:
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  402098:	4b05      	ldr	r3, [pc, #20]	; (4020b0 <system_init+0x18>)
	CAN_0_PORT_init();
	can_async_init(&CAN_0, MCAN0);
}

void system_init(void)
{
  40209a:	b510      	push	{r4, lr}
  40209c:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40209e:	4a05      	ldr	r2, [pc, #20]	; (4020b4 <system_init+0x1c>)
  4020a0:	6853      	ldr	r3, [r2, #4]
  4020a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	//USART_0_init();

	USB_DEVICE_INSTANCE_init();

	//CAN_0_init();
}
  4020a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4020aa:	6053      	str	r3, [r2, #4]
	USB_DEVICE_INSTANCE_init();
  4020ac:	4b02      	ldr	r3, [pc, #8]	; (4020b8 <system_init+0x20>)
  4020ae:	4718      	bx	r3
  4020b0:	00401179 	.word	0x00401179
  4020b4:	400e1850 	.word	0x400e1850
  4020b8:	00402081 	.word	0x00402081

004020bc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4020bc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4020c0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4020c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4020c4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
  4020c8:	4770      	bx	lr

004020ca <atomic_leave_critical>:
  4020ca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4020ce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4020d0:	f383 8810 	msr	PRIMASK, r3
}
  4020d4:	4770      	bx	lr
	...

004020d8 <__libc_init_array>:
  4020d8:	b570      	push	{r4, r5, r6, lr}
  4020da:	4d0d      	ldr	r5, [pc, #52]	; (402110 <__libc_init_array+0x38>)
  4020dc:	4c0d      	ldr	r4, [pc, #52]	; (402114 <__libc_init_array+0x3c>)
  4020de:	1b64      	subs	r4, r4, r5
  4020e0:	10a4      	asrs	r4, r4, #2
  4020e2:	2600      	movs	r6, #0
  4020e4:	42a6      	cmp	r6, r4
  4020e6:	d109      	bne.n	4020fc <__libc_init_array+0x24>
  4020e8:	4d0b      	ldr	r5, [pc, #44]	; (402118 <__libc_init_array+0x40>)
  4020ea:	4c0c      	ldr	r4, [pc, #48]	; (40211c <__libc_init_array+0x44>)
  4020ec:	f000 f85c 	bl	4021a8 <_init>
  4020f0:	1b64      	subs	r4, r4, r5
  4020f2:	10a4      	asrs	r4, r4, #2
  4020f4:	2600      	movs	r6, #0
  4020f6:	42a6      	cmp	r6, r4
  4020f8:	d105      	bne.n	402106 <__libc_init_array+0x2e>
  4020fa:	bd70      	pop	{r4, r5, r6, pc}
  4020fc:	f855 3b04 	ldr.w	r3, [r5], #4
  402100:	4798      	blx	r3
  402102:	3601      	adds	r6, #1
  402104:	e7ee      	b.n	4020e4 <__libc_init_array+0xc>
  402106:	f855 3b04 	ldr.w	r3, [r5], #4
  40210a:	4798      	blx	r3
  40210c:	3601      	adds	r6, #1
  40210e:	e7f2      	b.n	4020f6 <__libc_init_array+0x1e>
  402110:	004021b4 	.word	0x004021b4
  402114:	004021b4 	.word	0x004021b4
  402118:	004021b4 	.word	0x004021b4
  40211c:	004021b8 	.word	0x004021b8

00402120 <memcpy>:
  402120:	440a      	add	r2, r1
  402122:	4291      	cmp	r1, r2
  402124:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
  402128:	d100      	bne.n	40212c <memcpy+0xc>
  40212a:	4770      	bx	lr
  40212c:	b510      	push	{r4, lr}
  40212e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402132:	f803 4f01 	strb.w	r4, [r3, #1]!
  402136:	4291      	cmp	r1, r2
  402138:	d1f9      	bne.n	40212e <memcpy+0xe>
  40213a:	bd10      	pop	{r4, pc}

0040213c <memset>:
  40213c:	4402      	add	r2, r0
  40213e:	4603      	mov	r3, r0
  402140:	4293      	cmp	r3, r2
  402142:	d100      	bne.n	402146 <memset+0xa>
  402144:	4770      	bx	lr
  402146:	f803 1b01 	strb.w	r1, [r3], #1
  40214a:	e7f9      	b.n	402140 <memset+0x4>
  40214c:	682f2e2e 	.word	0x682f2e2e
  402150:	752f6c70 	.word	0x752f6c70
  402154:	73686273 	.word	0x73686273
  402158:	6c70682f 	.word	0x6c70682f
  40215c:	6273755f 	.word	0x6273755f
  402160:	632e7368 	.word	0x632e7368
  402164:	00          	.byte	0x00
  402165:	2e          	.byte	0x2e
  402166:	2f2e      	.short	0x2f2e
  402168:	2f6c6168 	.word	0x2f6c6168
  40216c:	6c697475 	.word	0x6c697475
  402170:	72732f73 	.word	0x72732f73
  402174:	74752f63 	.word	0x74752f63
  402178:	5f736c69 	.word	0x5f736c69
  40217c:	7473696c 	.word	0x7473696c
  402180:	632e      	.short	0x632e
	...

00402183 <CSWTCH.37>:
  402183:	01ed 0101 0201                               .......

0040218a <CSWTCH.40>:
  40218a:	00ed 0101 0201 2ef0 2f2e 7375 2f62 6564     ........./usb/de
  40219a:	6976 6563 752f 6273 6364 632e 0000          vice/usbdc.c..

004021a8 <_init>:
  4021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021aa:	bf00      	nop
  4021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4021ae:	bc08      	pop	{r3}
  4021b0:	469e      	mov	lr, r3
  4021b2:	4770      	bx	lr

004021b4 <__init_array_start>:
  4021b4:	0040018d 	.word	0x0040018d

004021b8 <_fini>:
  4021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021ba:	bf00      	nop
  4021bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4021be:	bc08      	pop	{r3}
  4021c0:	469e      	mov	lr, r3
  4021c2:	4770      	bx	lr

004021c4 <__fini_array_start>:
  4021c4:	00400169 	.word	0x00400169
